/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  containsBytes,
  fixEncoderSize,
  getBytesEncoder,
  type Address,
  type ReadonlyUint8Array,
} from '@solana/kit';
import {
  type ParsedCreateJournalEntryInstruction,
  type ParsedDeleteJournalEntryInstruction,
  type ParsedUpdateJournalEntryInstruction,
} from '../instructions';

export const CURD_DAPP_PROGRAM_ADDRESS =
  'EQ84rMPQR8HQQ5QfHKyLnRUGF3XAaUMHtWmhv1ZzSEaE' as Address<'EQ84rMPQR8HQQ5QfHKyLnRUGF3XAaUMHtWmhv1ZzSEaE'>;

export enum CurdDappAccount {
  JournalEntry,
}

export function identifyCurdDappAccount(
  account: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): CurdDappAccount {
  const data = 'data' in account ? account.data : account;
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([255, 74, 177, 178, 227, 112, 46, 152])
      ),
      0
    )
  ) {
    return CurdDappAccount.JournalEntry;
  }
  throw new Error(
    'The provided account could not be identified as a curdDapp account.'
  );
}

export enum CurdDappInstruction {
  CreateJournalEntry,
  DeleteJournalEntry,
  UpdateJournalEntry,
}

export function identifyCurdDappInstruction(
  instruction: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): CurdDappInstruction {
  const data = 'data' in instruction ? instruction.data : instruction;
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([48, 65, 201, 186, 25, 41, 127, 0])
      ),
      0
    )
  ) {
    return CurdDappInstruction.CreateJournalEntry;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([156, 50, 93, 5, 157, 97, 188, 114])
      ),
      0
    )
  ) {
    return CurdDappInstruction.DeleteJournalEntry;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([113, 164, 49, 62, 43, 83, 194, 172])
      ),
      0
    )
  ) {
    return CurdDappInstruction.UpdateJournalEntry;
  }
  throw new Error(
    'The provided instruction could not be identified as a curdDapp instruction.'
  );
}

export type ParsedCurdDappInstruction<
  TProgram extends string = 'EQ84rMPQR8HQQ5QfHKyLnRUGF3XAaUMHtWmhv1ZzSEaE',
> =
  | ({
      instructionType: CurdDappInstruction.CreateJournalEntry;
    } & ParsedCreateJournalEntryInstruction<TProgram>)
  | ({
      instructionType: CurdDappInstruction.DeleteJournalEntry;
    } & ParsedDeleteJournalEntryInstruction<TProgram>)
  | ({
      instructionType: CurdDappInstruction.UpdateJournalEntry;
    } & ParsedUpdateJournalEntryInstruction<TProgram>);
