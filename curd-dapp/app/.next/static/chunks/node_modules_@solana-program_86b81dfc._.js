(globalThis.TURBOPACK = globalThis.TURBOPACK || []).push([typeof document === "object" ? document.currentScript : undefined, {

"[project]/node_modules/@solana-program/compute-budget/dist/src/index.mjs [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

__turbopack_context__.s({
    "COMPUTE_BUDGET_PROGRAM_ADDRESS": ()=>COMPUTE_BUDGET_PROGRAM_ADDRESS,
    "ComputeBudgetInstruction": ()=>ComputeBudgetInstruction,
    "MAX_COMPUTE_UNIT_LIMIT": ()=>MAX_COMPUTE_UNIT_LIMIT,
    "PROVISORY_COMPUTE_UNIT_LIMIT": ()=>PROVISORY_COMPUTE_UNIT_LIMIT,
    "REQUEST_HEAP_FRAME_DISCRIMINATOR": ()=>REQUEST_HEAP_FRAME_DISCRIMINATOR,
    "REQUEST_UNITS_DISCRIMINATOR": ()=>REQUEST_UNITS_DISCRIMINATOR,
    "SET_COMPUTE_UNIT_LIMIT_DISCRIMINATOR": ()=>SET_COMPUTE_UNIT_LIMIT_DISCRIMINATOR,
    "SET_COMPUTE_UNIT_PRICE_DISCRIMINATOR": ()=>SET_COMPUTE_UNIT_PRICE_DISCRIMINATOR,
    "SET_LOADED_ACCOUNTS_DATA_SIZE_LIMIT_DISCRIMINATOR": ()=>SET_LOADED_ACCOUNTS_DATA_SIZE_LIMIT_DISCRIMINATOR,
    "estimateAndUpdateProvisoryComputeUnitLimitFactory": ()=>estimateAndUpdateProvisoryComputeUnitLimitFactory,
    "estimateComputeUnitLimitFactory": ()=>estimateComputeUnitLimitFactory,
    "fillProvisorySetComputeUnitLimitInstruction": ()=>fillProvisorySetComputeUnitLimitInstruction,
    "getRequestHeapFrameDiscriminatorBytes": ()=>getRequestHeapFrameDiscriminatorBytes,
    "getRequestHeapFrameInstruction": ()=>getRequestHeapFrameInstruction,
    "getRequestHeapFrameInstructionDataCodec": ()=>getRequestHeapFrameInstructionDataCodec,
    "getRequestHeapFrameInstructionDataDecoder": ()=>getRequestHeapFrameInstructionDataDecoder,
    "getRequestHeapFrameInstructionDataEncoder": ()=>getRequestHeapFrameInstructionDataEncoder,
    "getRequestUnitsDiscriminatorBytes": ()=>getRequestUnitsDiscriminatorBytes,
    "getRequestUnitsInstruction": ()=>getRequestUnitsInstruction,
    "getRequestUnitsInstructionDataCodec": ()=>getRequestUnitsInstructionDataCodec,
    "getRequestUnitsInstructionDataDecoder": ()=>getRequestUnitsInstructionDataDecoder,
    "getRequestUnitsInstructionDataEncoder": ()=>getRequestUnitsInstructionDataEncoder,
    "getSetComputeUnitLimitDiscriminatorBytes": ()=>getSetComputeUnitLimitDiscriminatorBytes,
    "getSetComputeUnitLimitInstruction": ()=>getSetComputeUnitLimitInstruction,
    "getSetComputeUnitLimitInstructionDataCodec": ()=>getSetComputeUnitLimitInstructionDataCodec,
    "getSetComputeUnitLimitInstructionDataDecoder": ()=>getSetComputeUnitLimitInstructionDataDecoder,
    "getSetComputeUnitLimitInstructionDataEncoder": ()=>getSetComputeUnitLimitInstructionDataEncoder,
    "getSetComputeUnitPriceDiscriminatorBytes": ()=>getSetComputeUnitPriceDiscriminatorBytes,
    "getSetComputeUnitPriceInstruction": ()=>getSetComputeUnitPriceInstruction,
    "getSetComputeUnitPriceInstructionDataCodec": ()=>getSetComputeUnitPriceInstructionDataCodec,
    "getSetComputeUnitPriceInstructionDataDecoder": ()=>getSetComputeUnitPriceInstructionDataDecoder,
    "getSetComputeUnitPriceInstructionDataEncoder": ()=>getSetComputeUnitPriceInstructionDataEncoder,
    "getSetLoadedAccountsDataSizeLimitDiscriminatorBytes": ()=>getSetLoadedAccountsDataSizeLimitDiscriminatorBytes,
    "getSetLoadedAccountsDataSizeLimitInstruction": ()=>getSetLoadedAccountsDataSizeLimitInstruction,
    "getSetLoadedAccountsDataSizeLimitInstructionDataCodec": ()=>getSetLoadedAccountsDataSizeLimitInstructionDataCodec,
    "getSetLoadedAccountsDataSizeLimitInstructionDataDecoder": ()=>getSetLoadedAccountsDataSizeLimitInstructionDataDecoder,
    "getSetLoadedAccountsDataSizeLimitInstructionDataEncoder": ()=>getSetLoadedAccountsDataSizeLimitInstructionDataEncoder,
    "identifyComputeBudgetInstruction": ()=>identifyComputeBudgetInstruction,
    "parseRequestHeapFrameInstruction": ()=>parseRequestHeapFrameInstruction,
    "parseRequestUnitsInstruction": ()=>parseRequestUnitsInstruction,
    "parseSetComputeUnitLimitInstruction": ()=>parseSetComputeUnitLimitInstruction,
    "parseSetComputeUnitPriceInstruction": ()=>parseSetComputeUnitPriceInstruction,
    "parseSetLoadedAccountsDataSizeLimitInstruction": ()=>parseSetLoadedAccountsDataSizeLimitInstruction,
    "setTransactionMessageComputeUnitPrice": ()=>setTransactionMessageComputeUnitPrice,
    "updateOrAppendSetComputeUnitLimitInstruction": ()=>updateOrAppendSetComputeUnitLimitInstruction,
    "updateOrAppendSetComputeUnitPriceInstruction": ()=>updateOrAppendSetComputeUnitPriceInstruction
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$codecs$2f$node_modules$2f40$solana$2f$codecs$2d$core$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@solana/codecs/node_modules/@solana/codecs-core/dist/index.browser.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$codecs$2f$node_modules$2f40$solana$2f$codecs$2d$numbers$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@solana/codecs/node_modules/@solana/codecs-numbers/dist/index.browser.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$codecs$2f$node_modules$2f40$solana$2f$codecs$2d$data$2d$structures$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@solana/codecs/node_modules/@solana/codecs-data-structures/dist/index.browser.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$kit$2f$node_modules$2f40$solana$2f$transaction$2d$messages$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@solana/kit/node_modules/@solana/transaction-messages/dist/index.browser.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$kit$2f$node_modules$2f40$solana$2f$functional$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@solana/kit/node_modules/@solana/functional/dist/index.browser.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$kit$2f$node_modules$2f40$solana$2f$transactions$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@solana/kit/node_modules/@solana/transactions/dist/index.browser.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$kit$2f$node_modules$2f40$solana$2f$errors$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@solana/kit/node_modules/@solana/errors/dist/index.browser.mjs [app-client] (ecmascript)");
;
// src/generated/instructions/requestHeapFrame.ts
var COMPUTE_BUDGET_PROGRAM_ADDRESS = "ComputeBudget111111111111111111111111111111";
var ComputeBudgetInstruction = /* @__PURE__ */ ((ComputeBudgetInstruction2)=>{
    ComputeBudgetInstruction2[ComputeBudgetInstruction2["RequestUnits"] = 0] = "RequestUnits";
    ComputeBudgetInstruction2[ComputeBudgetInstruction2["RequestHeapFrame"] = 1] = "RequestHeapFrame";
    ComputeBudgetInstruction2[ComputeBudgetInstruction2["SetComputeUnitLimit"] = 2] = "SetComputeUnitLimit";
    ComputeBudgetInstruction2[ComputeBudgetInstruction2["SetComputeUnitPrice"] = 3] = "SetComputeUnitPrice";
    ComputeBudgetInstruction2[ComputeBudgetInstruction2["SetLoadedAccountsDataSizeLimit"] = 4] = "SetLoadedAccountsDataSizeLimit";
    return ComputeBudgetInstruction2;
})(ComputeBudgetInstruction || {});
function identifyComputeBudgetInstruction(instruction) {
    const data = "data" in instruction ? instruction.data : instruction;
    if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$codecs$2f$node_modules$2f40$solana$2f$codecs$2d$core$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["containsBytes"])(data, (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$codecs$2f$node_modules$2f40$solana$2f$codecs$2d$numbers$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getU8Encoder"])().encode(0), 0)) {
        return 0 /* RequestUnits */ ;
    }
    if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$codecs$2f$node_modules$2f40$solana$2f$codecs$2d$core$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["containsBytes"])(data, (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$codecs$2f$node_modules$2f40$solana$2f$codecs$2d$numbers$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getU8Encoder"])().encode(1), 0)) {
        return 1 /* RequestHeapFrame */ ;
    }
    if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$codecs$2f$node_modules$2f40$solana$2f$codecs$2d$core$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["containsBytes"])(data, (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$codecs$2f$node_modules$2f40$solana$2f$codecs$2d$numbers$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getU8Encoder"])().encode(2), 0)) {
        return 2 /* SetComputeUnitLimit */ ;
    }
    if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$codecs$2f$node_modules$2f40$solana$2f$codecs$2d$core$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["containsBytes"])(data, (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$codecs$2f$node_modules$2f40$solana$2f$codecs$2d$numbers$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getU8Encoder"])().encode(3), 0)) {
        return 3 /* SetComputeUnitPrice */ ;
    }
    if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$codecs$2f$node_modules$2f40$solana$2f$codecs$2d$core$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["containsBytes"])(data, (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$codecs$2f$node_modules$2f40$solana$2f$codecs$2d$numbers$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getU8Encoder"])().encode(4), 0)) {
        return 4 /* SetLoadedAccountsDataSizeLimit */ ;
    }
    throw new Error("The provided instruction could not be identified as a computeBudget instruction.");
}
// src/generated/instructions/requestHeapFrame.ts
var REQUEST_HEAP_FRAME_DISCRIMINATOR = 1;
function getRequestHeapFrameDiscriminatorBytes() {
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$codecs$2f$node_modules$2f40$solana$2f$codecs$2d$numbers$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getU8Encoder"])().encode(REQUEST_HEAP_FRAME_DISCRIMINATOR);
}
function getRequestHeapFrameInstructionDataEncoder() {
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$codecs$2f$node_modules$2f40$solana$2f$codecs$2d$core$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["transformEncoder"])((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$codecs$2f$node_modules$2f40$solana$2f$codecs$2d$data$2d$structures$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getStructEncoder"])([
        [
            "discriminator",
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$codecs$2f$node_modules$2f40$solana$2f$codecs$2d$numbers$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getU8Encoder"])()
        ],
        [
            "bytes",
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$codecs$2f$node_modules$2f40$solana$2f$codecs$2d$numbers$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getU32Encoder"])()
        ]
    ]), (value)=>({
            ...value,
            discriminator: REQUEST_HEAP_FRAME_DISCRIMINATOR
        }));
}
function getRequestHeapFrameInstructionDataDecoder() {
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$codecs$2f$node_modules$2f40$solana$2f$codecs$2d$data$2d$structures$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getStructDecoder"])([
        [
            "discriminator",
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$codecs$2f$node_modules$2f40$solana$2f$codecs$2d$numbers$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getU8Decoder"])()
        ],
        [
            "bytes",
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$codecs$2f$node_modules$2f40$solana$2f$codecs$2d$numbers$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getU32Decoder"])()
        ]
    ]);
}
function getRequestHeapFrameInstructionDataCodec() {
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$codecs$2f$node_modules$2f40$solana$2f$codecs$2d$core$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["combineCodec"])(getRequestHeapFrameInstructionDataEncoder(), getRequestHeapFrameInstructionDataDecoder());
}
function getRequestHeapFrameInstruction(input, config) {
    var _config_programAddress;
    const programAddress = (_config_programAddress = config === null || config === void 0 ? void 0 : config.programAddress) !== null && _config_programAddress !== void 0 ? _config_programAddress : COMPUTE_BUDGET_PROGRAM_ADDRESS;
    const args = {
        ...input
    };
    const instruction = {
        programAddress,
        data: getRequestHeapFrameInstructionDataEncoder().encode(args)
    };
    return instruction;
}
function parseRequestHeapFrameInstruction(instruction) {
    return {
        programAddress: instruction.programAddress,
        data: getRequestHeapFrameInstructionDataDecoder().decode(instruction.data)
    };
}
var REQUEST_UNITS_DISCRIMINATOR = 0;
function getRequestUnitsDiscriminatorBytes() {
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$codecs$2f$node_modules$2f40$solana$2f$codecs$2d$numbers$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getU8Encoder"])().encode(REQUEST_UNITS_DISCRIMINATOR);
}
function getRequestUnitsInstructionDataEncoder() {
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$codecs$2f$node_modules$2f40$solana$2f$codecs$2d$core$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["transformEncoder"])((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$codecs$2f$node_modules$2f40$solana$2f$codecs$2d$data$2d$structures$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getStructEncoder"])([
        [
            "discriminator",
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$codecs$2f$node_modules$2f40$solana$2f$codecs$2d$numbers$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getU8Encoder"])()
        ],
        [
            "units",
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$codecs$2f$node_modules$2f40$solana$2f$codecs$2d$numbers$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getU32Encoder"])()
        ],
        [
            "additionalFee",
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$codecs$2f$node_modules$2f40$solana$2f$codecs$2d$numbers$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getU32Encoder"])()
        ]
    ]), (value)=>({
            ...value,
            discriminator: REQUEST_UNITS_DISCRIMINATOR
        }));
}
function getRequestUnitsInstructionDataDecoder() {
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$codecs$2f$node_modules$2f40$solana$2f$codecs$2d$data$2d$structures$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getStructDecoder"])([
        [
            "discriminator",
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$codecs$2f$node_modules$2f40$solana$2f$codecs$2d$numbers$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getU8Decoder"])()
        ],
        [
            "units",
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$codecs$2f$node_modules$2f40$solana$2f$codecs$2d$numbers$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getU32Decoder"])()
        ],
        [
            "additionalFee",
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$codecs$2f$node_modules$2f40$solana$2f$codecs$2d$numbers$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getU32Decoder"])()
        ]
    ]);
}
function getRequestUnitsInstructionDataCodec() {
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$codecs$2f$node_modules$2f40$solana$2f$codecs$2d$core$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["combineCodec"])(getRequestUnitsInstructionDataEncoder(), getRequestUnitsInstructionDataDecoder());
}
function getRequestUnitsInstruction(input, config) {
    var _config_programAddress;
    const programAddress = (_config_programAddress = config === null || config === void 0 ? void 0 : config.programAddress) !== null && _config_programAddress !== void 0 ? _config_programAddress : COMPUTE_BUDGET_PROGRAM_ADDRESS;
    const args = {
        ...input
    };
    const instruction = {
        programAddress,
        data: getRequestUnitsInstructionDataEncoder().encode(args)
    };
    return instruction;
}
function parseRequestUnitsInstruction(instruction) {
    return {
        programAddress: instruction.programAddress,
        data: getRequestUnitsInstructionDataDecoder().decode(instruction.data)
    };
}
var SET_COMPUTE_UNIT_LIMIT_DISCRIMINATOR = 2;
function getSetComputeUnitLimitDiscriminatorBytes() {
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$codecs$2f$node_modules$2f40$solana$2f$codecs$2d$numbers$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getU8Encoder"])().encode(SET_COMPUTE_UNIT_LIMIT_DISCRIMINATOR);
}
function getSetComputeUnitLimitInstructionDataEncoder() {
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$codecs$2f$node_modules$2f40$solana$2f$codecs$2d$core$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["transformEncoder"])((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$codecs$2f$node_modules$2f40$solana$2f$codecs$2d$data$2d$structures$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getStructEncoder"])([
        [
            "discriminator",
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$codecs$2f$node_modules$2f40$solana$2f$codecs$2d$numbers$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getU8Encoder"])()
        ],
        [
            "units",
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$codecs$2f$node_modules$2f40$solana$2f$codecs$2d$numbers$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getU32Encoder"])()
        ]
    ]), (value)=>({
            ...value,
            discriminator: SET_COMPUTE_UNIT_LIMIT_DISCRIMINATOR
        }));
}
function getSetComputeUnitLimitInstructionDataDecoder() {
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$codecs$2f$node_modules$2f40$solana$2f$codecs$2d$data$2d$structures$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getStructDecoder"])([
        [
            "discriminator",
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$codecs$2f$node_modules$2f40$solana$2f$codecs$2d$numbers$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getU8Decoder"])()
        ],
        [
            "units",
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$codecs$2f$node_modules$2f40$solana$2f$codecs$2d$numbers$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getU32Decoder"])()
        ]
    ]);
}
function getSetComputeUnitLimitInstructionDataCodec() {
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$codecs$2f$node_modules$2f40$solana$2f$codecs$2d$core$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["combineCodec"])(getSetComputeUnitLimitInstructionDataEncoder(), getSetComputeUnitLimitInstructionDataDecoder());
}
function getSetComputeUnitLimitInstruction(input, config) {
    var _config_programAddress;
    const programAddress = (_config_programAddress = config === null || config === void 0 ? void 0 : config.programAddress) !== null && _config_programAddress !== void 0 ? _config_programAddress : COMPUTE_BUDGET_PROGRAM_ADDRESS;
    const args = {
        ...input
    };
    const instruction = {
        programAddress,
        data: getSetComputeUnitLimitInstructionDataEncoder().encode(args)
    };
    return instruction;
}
function parseSetComputeUnitLimitInstruction(instruction) {
    return {
        programAddress: instruction.programAddress,
        data: getSetComputeUnitLimitInstructionDataDecoder().decode(instruction.data)
    };
}
var SET_COMPUTE_UNIT_PRICE_DISCRIMINATOR = 3;
function getSetComputeUnitPriceDiscriminatorBytes() {
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$codecs$2f$node_modules$2f40$solana$2f$codecs$2d$numbers$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getU8Encoder"])().encode(SET_COMPUTE_UNIT_PRICE_DISCRIMINATOR);
}
function getSetComputeUnitPriceInstructionDataEncoder() {
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$codecs$2f$node_modules$2f40$solana$2f$codecs$2d$core$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["transformEncoder"])((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$codecs$2f$node_modules$2f40$solana$2f$codecs$2d$data$2d$structures$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getStructEncoder"])([
        [
            "discriminator",
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$codecs$2f$node_modules$2f40$solana$2f$codecs$2d$numbers$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getU8Encoder"])()
        ],
        [
            "microLamports",
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$codecs$2f$node_modules$2f40$solana$2f$codecs$2d$numbers$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getU64Encoder"])()
        ]
    ]), (value)=>({
            ...value,
            discriminator: SET_COMPUTE_UNIT_PRICE_DISCRIMINATOR
        }));
}
function getSetComputeUnitPriceInstructionDataDecoder() {
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$codecs$2f$node_modules$2f40$solana$2f$codecs$2d$data$2d$structures$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getStructDecoder"])([
        [
            "discriminator",
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$codecs$2f$node_modules$2f40$solana$2f$codecs$2d$numbers$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getU8Decoder"])()
        ],
        [
            "microLamports",
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$codecs$2f$node_modules$2f40$solana$2f$codecs$2d$numbers$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getU64Decoder"])()
        ]
    ]);
}
function getSetComputeUnitPriceInstructionDataCodec() {
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$codecs$2f$node_modules$2f40$solana$2f$codecs$2d$core$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["combineCodec"])(getSetComputeUnitPriceInstructionDataEncoder(), getSetComputeUnitPriceInstructionDataDecoder());
}
function getSetComputeUnitPriceInstruction(input, config) {
    var _config_programAddress;
    const programAddress = (_config_programAddress = config === null || config === void 0 ? void 0 : config.programAddress) !== null && _config_programAddress !== void 0 ? _config_programAddress : COMPUTE_BUDGET_PROGRAM_ADDRESS;
    const args = {
        ...input
    };
    const instruction = {
        programAddress,
        data: getSetComputeUnitPriceInstructionDataEncoder().encode(args)
    };
    return instruction;
}
function parseSetComputeUnitPriceInstruction(instruction) {
    return {
        programAddress: instruction.programAddress,
        data: getSetComputeUnitPriceInstructionDataDecoder().decode(instruction.data)
    };
}
var SET_LOADED_ACCOUNTS_DATA_SIZE_LIMIT_DISCRIMINATOR = 4;
function getSetLoadedAccountsDataSizeLimitDiscriminatorBytes() {
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$codecs$2f$node_modules$2f40$solana$2f$codecs$2d$numbers$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getU8Encoder"])().encode(SET_LOADED_ACCOUNTS_DATA_SIZE_LIMIT_DISCRIMINATOR);
}
function getSetLoadedAccountsDataSizeLimitInstructionDataEncoder() {
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$codecs$2f$node_modules$2f40$solana$2f$codecs$2d$core$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["transformEncoder"])((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$codecs$2f$node_modules$2f40$solana$2f$codecs$2d$data$2d$structures$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getStructEncoder"])([
        [
            "discriminator",
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$codecs$2f$node_modules$2f40$solana$2f$codecs$2d$numbers$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getU8Encoder"])()
        ],
        [
            "accountDataSizeLimit",
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$codecs$2f$node_modules$2f40$solana$2f$codecs$2d$numbers$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getU32Encoder"])()
        ]
    ]), (value)=>({
            ...value,
            discriminator: SET_LOADED_ACCOUNTS_DATA_SIZE_LIMIT_DISCRIMINATOR
        }));
}
function getSetLoadedAccountsDataSizeLimitInstructionDataDecoder() {
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$codecs$2f$node_modules$2f40$solana$2f$codecs$2d$data$2d$structures$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getStructDecoder"])([
        [
            "discriminator",
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$codecs$2f$node_modules$2f40$solana$2f$codecs$2d$numbers$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getU8Decoder"])()
        ],
        [
            "accountDataSizeLimit",
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$codecs$2f$node_modules$2f40$solana$2f$codecs$2d$numbers$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getU32Decoder"])()
        ]
    ]);
}
function getSetLoadedAccountsDataSizeLimitInstructionDataCodec() {
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$codecs$2f$node_modules$2f40$solana$2f$codecs$2d$core$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["combineCodec"])(getSetLoadedAccountsDataSizeLimitInstructionDataEncoder(), getSetLoadedAccountsDataSizeLimitInstructionDataDecoder());
}
function getSetLoadedAccountsDataSizeLimitInstruction(input, config) {
    var _config_programAddress;
    const programAddress = (_config_programAddress = config === null || config === void 0 ? void 0 : config.programAddress) !== null && _config_programAddress !== void 0 ? _config_programAddress : COMPUTE_BUDGET_PROGRAM_ADDRESS;
    const args = {
        ...input
    };
    const instruction = {
        programAddress,
        data: getSetLoadedAccountsDataSizeLimitInstructionDataEncoder().encode(args)
    };
    return instruction;
}
function parseSetLoadedAccountsDataSizeLimitInstruction(instruction) {
    return {
        programAddress: instruction.programAddress,
        data: getSetLoadedAccountsDataSizeLimitInstructionDataDecoder().decode(instruction.data)
    };
}
// src/constants.ts
var PROVISORY_COMPUTE_UNIT_LIMIT = 0;
var MAX_COMPUTE_UNIT_LIMIT = 14e5;
function getSetComputeUnitLimitInstructionIndexAndUnits(transactionMessage) {
    const index = getSetComputeUnitLimitInstructionIndex(transactionMessage);
    if (index < 0) {
        return null;
    }
    const units = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$codecs$2f$node_modules$2f40$solana$2f$codecs$2d$numbers$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getU32Decoder"])().decode(transactionMessage.instructions[index].data, 1);
    return {
        index,
        units
    };
}
function getSetComputeUnitLimitInstructionIndex(transactionMessage) {
    return transactionMessage.instructions.findIndex(isSetComputeUnitLimitInstruction);
}
function isSetComputeUnitLimitInstruction(instruction) {
    return instruction.programAddress === COMPUTE_BUDGET_PROGRAM_ADDRESS && identifyComputeBudgetInstruction(instruction.data) === 2 /* SetComputeUnitLimit */ ;
}
function getSetComputeUnitPriceInstructionIndexAndMicroLamports(transactionMessage) {
    const index = getSetComputeUnitPriceInstructionIndex(transactionMessage);
    if (index < 0) {
        return null;
    }
    const microLamports = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$codecs$2f$node_modules$2f40$solana$2f$codecs$2d$numbers$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getU64Decoder"])().decode(transactionMessage.instructions[index].data, 1);
    return {
        index,
        microLamports
    };
}
function getSetComputeUnitPriceInstructionIndex(transactionMessage) {
    return transactionMessage.instructions.findIndex(isSetComputeUnitPriceInstruction);
}
function isSetComputeUnitPriceInstruction(instruction) {
    return instruction.programAddress === COMPUTE_BUDGET_PROGRAM_ADDRESS && identifyComputeBudgetInstruction(instruction.data) === 3 /* SetComputeUnitPrice */ ;
}
function fillProvisorySetComputeUnitLimitInstruction(transactionMessage) {
    return updateOrAppendSetComputeUnitLimitInstruction((previousUnits)=>previousUnits === null ? PROVISORY_COMPUTE_UNIT_LIMIT : previousUnits, transactionMessage);
}
function updateOrAppendSetComputeUnitLimitInstruction(units, transactionMessage) {
    const getUnits = (previousUnits2)=>typeof units === "function" ? units(previousUnits2) : units;
    const instructionDetails = getSetComputeUnitLimitInstructionIndexAndUnits(transactionMessage);
    if (!instructionDetails) {
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$kit$2f$node_modules$2f40$solana$2f$transaction$2d$messages$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["appendTransactionMessageInstruction"])(getSetComputeUnitLimitInstruction({
            units: getUnits(null)
        }), transactionMessage);
    }
    const { index, units: previousUnits } = instructionDetails;
    const newUnits = getUnits(previousUnits);
    if (newUnits === previousUnits) {
        return transactionMessage;
    }
    const newInstruction = getSetComputeUnitLimitInstruction({
        units: newUnits
    });
    const newInstructions = [
        ...transactionMessage.instructions
    ];
    newInstructions.splice(index, 1, newInstruction);
    return Object.freeze({
        ...transactionMessage,
        instructions: newInstructions
    });
}
// src/estimateAndSetComputeLimit.ts
function estimateAndUpdateProvisoryComputeUnitLimitFactory(estimateComputeUnitLimit2) {
    return async function fn(transactionMessage, config) {
        const instructionDetails = getSetComputeUnitLimitInstructionIndexAndUnits(transactionMessage);
        if (instructionDetails && instructionDetails.units !== PROVISORY_COMPUTE_UNIT_LIMIT && instructionDetails.units !== MAX_COMPUTE_UNIT_LIMIT) {
            return transactionMessage;
        }
        return updateOrAppendSetComputeUnitLimitInstruction(await estimateComputeUnitLimit2(transactionMessage, config), transactionMessage);
    };
}
var PROVISORY_BLOCKHASH_LIFETIME_CONSTRAINT = {
    blockhash: "11111111111111111111111111111111",
    lastValidBlockHeight: 0n
};
function fillMissingTransactionMessageLifetimeUsingProvisoryBlockhash(transactionMessage) {
    if ("lifetimeConstraint" in transactionMessage) {
        return transactionMessage;
    }
    return setTransactionMessageLifetimeUsingProvisoryBlockhash(transactionMessage);
}
function setTransactionMessageLifetimeUsingProvisoryBlockhash(transactionMessage) {
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$kit$2f$node_modules$2f40$solana$2f$transaction$2d$messages$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["setTransactionMessageLifetimeUsingBlockhash"])(PROVISORY_BLOCKHASH_LIFETIME_CONSTRAINT, transactionMessage);
}
// src/estimateComputeLimitInternal.ts
async function estimateComputeUnitLimit(param) {
    let { transactionMessage, ...configs } = param;
    const replaceRecentBlockhash = !(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$kit$2f$node_modules$2f40$solana$2f$transaction$2d$messages$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isDurableNonceTransaction"])(transactionMessage);
    const transaction = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$kit$2f$node_modules$2f40$solana$2f$functional$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["pipe"])(transactionMessage, fillMissingTransactionMessageLifetimeUsingProvisoryBlockhash, (m)=>updateOrAppendSetComputeUnitLimitInstruction(MAX_COMPUTE_UNIT_LIMIT, m), __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$kit$2f$node_modules$2f40$solana$2f$transactions$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["compileTransaction"]);
    return await simulateTransactionAndGetConsumedUnits({
        transaction,
        replaceRecentBlockhash,
        ...configs
    });
}
async function simulateTransactionAndGetConsumedUnits(param) {
    let { abortSignal, rpc, transaction, ...simulateConfig } = param;
    const wireTransactionBytes = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$kit$2f$node_modules$2f40$solana$2f$transactions$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getBase64EncodedWireTransaction"])(transaction);
    try {
        const { value: { err: transactionError, unitsConsumed } } = await rpc.simulateTransaction(wireTransactionBytes, {
            ...simulateConfig,
            encoding: "base64",
            sigVerify: false
        }).send({
            abortSignal
        });
        if (unitsConsumed == null) {
            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$kit$2f$node_modules$2f40$solana$2f$errors$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["SolanaError"](__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$kit$2f$node_modules$2f40$solana$2f$errors$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["SOLANA_ERROR__TRANSACTION__FAILED_TO_ESTIMATE_COMPUTE_LIMIT"]);
        }
        const downcastUnitsConsumed = unitsConsumed > 4294967295n ? 4294967295 : Number(unitsConsumed);
        if (transactionError) {
            throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$kit$2f$node_modules$2f40$solana$2f$errors$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["SolanaError"](__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$kit$2f$node_modules$2f40$solana$2f$errors$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["SOLANA_ERROR__TRANSACTION__FAILED_WHEN_SIMULATING_TO_ESTIMATE_COMPUTE_LIMIT"], {
                cause: transactionError,
                unitsConsumed: downcastUnitsConsumed
            });
        }
        return downcastUnitsConsumed;
    } catch (e) {
        if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$kit$2f$node_modules$2f40$solana$2f$errors$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isSolanaError"])(e, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$kit$2f$node_modules$2f40$solana$2f$errors$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["SOLANA_ERROR__TRANSACTION__FAILED_WHEN_SIMULATING_TO_ESTIMATE_COMPUTE_LIMIT"])) throw e;
        throw new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$kit$2f$node_modules$2f40$solana$2f$errors$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["SolanaError"](__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$kit$2f$node_modules$2f40$solana$2f$errors$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["SOLANA_ERROR__TRANSACTION__FAILED_TO_ESTIMATE_COMPUTE_LIMIT"], {
            cause: e
        });
    }
}
// src/estimateComputeLimit.ts
function estimateComputeUnitLimitFactory(param) {
    let { rpc } = param;
    return async function estimateComputeUnitLimitFactoryFunction(transactionMessage, config) {
        return await estimateComputeUnitLimit({
            ...config,
            rpc,
            transactionMessage
        });
    };
}
function setTransactionMessageComputeUnitPrice(microLamports, transactionMessage) {
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$kit$2f$node_modules$2f40$solana$2f$transaction$2d$messages$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["appendTransactionMessageInstruction"])(getSetComputeUnitPriceInstruction({
        microLamports
    }), transactionMessage);
}
function updateOrAppendSetComputeUnitPriceInstruction(microLamports, transactionMessage) {
    const getMicroLamports = (previousMicroLamports2)=>typeof microLamports === "function" ? microLamports(previousMicroLamports2) : microLamports;
    const instructionDetails = getSetComputeUnitPriceInstructionIndexAndMicroLamports(transactionMessage);
    if (!instructionDetails) {
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$kit$2f$node_modules$2f40$solana$2f$transaction$2d$messages$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["appendTransactionMessageInstruction"])(getSetComputeUnitPriceInstruction({
            microLamports: getMicroLamports(null)
        }), transactionMessage);
    }
    const { index, microLamports: previousMicroLamports } = instructionDetails;
    const newMicroLamports = getMicroLamports(previousMicroLamports);
    if (newMicroLamports === previousMicroLamports) {
        return transactionMessage;
    }
    const newInstruction = getSetComputeUnitPriceInstruction({
        microLamports: newMicroLamports
    });
    const newInstructions = [
        ...transactionMessage.instructions
    ];
    newInstructions.splice(index, 1, newInstruction);
    return Object.freeze({
        ...transactionMessage,
        instructions: newInstructions
    });
}
;
 //# sourceMappingURL=index.mjs.map
 //# sourceMappingURL=index.mjs.map
}),
"[project]/node_modules/@solana-program/system/dist/src/index.mjs [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

__turbopack_context__.s({
    "ADVANCE_NONCE_ACCOUNT_DISCRIMINATOR": ()=>ADVANCE_NONCE_ACCOUNT_DISCRIMINATOR,
    "ALLOCATE_DISCRIMINATOR": ()=>ALLOCATE_DISCRIMINATOR,
    "ALLOCATE_WITH_SEED_DISCRIMINATOR": ()=>ALLOCATE_WITH_SEED_DISCRIMINATOR,
    "ASSIGN_DISCRIMINATOR": ()=>ASSIGN_DISCRIMINATOR,
    "ASSIGN_WITH_SEED_DISCRIMINATOR": ()=>ASSIGN_WITH_SEED_DISCRIMINATOR,
    "AUTHORIZE_NONCE_ACCOUNT_DISCRIMINATOR": ()=>AUTHORIZE_NONCE_ACCOUNT_DISCRIMINATOR,
    "CREATE_ACCOUNT_DISCRIMINATOR": ()=>CREATE_ACCOUNT_DISCRIMINATOR,
    "CREATE_ACCOUNT_WITH_SEED_DISCRIMINATOR": ()=>CREATE_ACCOUNT_WITH_SEED_DISCRIMINATOR,
    "INITIALIZE_NONCE_ACCOUNT_DISCRIMINATOR": ()=>INITIALIZE_NONCE_ACCOUNT_DISCRIMINATOR,
    "NonceState": ()=>NonceState,
    "NonceVersion": ()=>NonceVersion,
    "SYSTEM_ERROR__ACCOUNT_ALREADY_IN_USE": ()=>SYSTEM_ERROR__ACCOUNT_ALREADY_IN_USE,
    "SYSTEM_ERROR__ADDRESS_WITH_SEED_MISMATCH": ()=>SYSTEM_ERROR__ADDRESS_WITH_SEED_MISMATCH,
    "SYSTEM_ERROR__INVALID_ACCOUNT_DATA_LENGTH": ()=>SYSTEM_ERROR__INVALID_ACCOUNT_DATA_LENGTH,
    "SYSTEM_ERROR__INVALID_PROGRAM_ID": ()=>SYSTEM_ERROR__INVALID_PROGRAM_ID,
    "SYSTEM_ERROR__MAX_SEED_LENGTH_EXCEEDED": ()=>SYSTEM_ERROR__MAX_SEED_LENGTH_EXCEEDED,
    "SYSTEM_ERROR__NONCE_BLOCKHASH_NOT_EXPIRED": ()=>SYSTEM_ERROR__NONCE_BLOCKHASH_NOT_EXPIRED,
    "SYSTEM_ERROR__NONCE_NO_RECENT_BLOCKHASHES": ()=>SYSTEM_ERROR__NONCE_NO_RECENT_BLOCKHASHES,
    "SYSTEM_ERROR__NONCE_UNEXPECTED_BLOCKHASH_VALUE": ()=>SYSTEM_ERROR__NONCE_UNEXPECTED_BLOCKHASH_VALUE,
    "SYSTEM_ERROR__RESULT_WITH_NEGATIVE_LAMPORTS": ()=>SYSTEM_ERROR__RESULT_WITH_NEGATIVE_LAMPORTS,
    "SYSTEM_PROGRAM_ADDRESS": ()=>SYSTEM_PROGRAM_ADDRESS,
    "SystemAccount": ()=>SystemAccount,
    "SystemInstruction": ()=>SystemInstruction,
    "TRANSFER_SOL_DISCRIMINATOR": ()=>TRANSFER_SOL_DISCRIMINATOR,
    "TRANSFER_SOL_WITH_SEED_DISCRIMINATOR": ()=>TRANSFER_SOL_WITH_SEED_DISCRIMINATOR,
    "UPGRADE_NONCE_ACCOUNT_DISCRIMINATOR": ()=>UPGRADE_NONCE_ACCOUNT_DISCRIMINATOR,
    "WITHDRAW_NONCE_ACCOUNT_DISCRIMINATOR": ()=>WITHDRAW_NONCE_ACCOUNT_DISCRIMINATOR,
    "decodeNonce": ()=>decodeNonce,
    "fetchAllMaybeNonce": ()=>fetchAllMaybeNonce,
    "fetchAllNonce": ()=>fetchAllNonce,
    "fetchMaybeNonce": ()=>fetchMaybeNonce,
    "fetchNonce": ()=>fetchNonce,
    "getAdvanceNonceAccountDiscriminatorBytes": ()=>getAdvanceNonceAccountDiscriminatorBytes,
    "getAdvanceNonceAccountInstruction": ()=>getAdvanceNonceAccountInstruction,
    "getAdvanceNonceAccountInstructionDataCodec": ()=>getAdvanceNonceAccountInstructionDataCodec,
    "getAdvanceNonceAccountInstructionDataDecoder": ()=>getAdvanceNonceAccountInstructionDataDecoder,
    "getAdvanceNonceAccountInstructionDataEncoder": ()=>getAdvanceNonceAccountInstructionDataEncoder,
    "getAllocateDiscriminatorBytes": ()=>getAllocateDiscriminatorBytes,
    "getAllocateInstruction": ()=>getAllocateInstruction,
    "getAllocateInstructionDataCodec": ()=>getAllocateInstructionDataCodec,
    "getAllocateInstructionDataDecoder": ()=>getAllocateInstructionDataDecoder,
    "getAllocateInstructionDataEncoder": ()=>getAllocateInstructionDataEncoder,
    "getAllocateWithSeedDiscriminatorBytes": ()=>getAllocateWithSeedDiscriminatorBytes,
    "getAllocateWithSeedInstruction": ()=>getAllocateWithSeedInstruction,
    "getAllocateWithSeedInstructionDataCodec": ()=>getAllocateWithSeedInstructionDataCodec,
    "getAllocateWithSeedInstructionDataDecoder": ()=>getAllocateWithSeedInstructionDataDecoder,
    "getAllocateWithSeedInstructionDataEncoder": ()=>getAllocateWithSeedInstructionDataEncoder,
    "getAssignDiscriminatorBytes": ()=>getAssignDiscriminatorBytes,
    "getAssignInstruction": ()=>getAssignInstruction,
    "getAssignInstructionDataCodec": ()=>getAssignInstructionDataCodec,
    "getAssignInstructionDataDecoder": ()=>getAssignInstructionDataDecoder,
    "getAssignInstructionDataEncoder": ()=>getAssignInstructionDataEncoder,
    "getAssignWithSeedDiscriminatorBytes": ()=>getAssignWithSeedDiscriminatorBytes,
    "getAssignWithSeedInstruction": ()=>getAssignWithSeedInstruction,
    "getAssignWithSeedInstructionDataCodec": ()=>getAssignWithSeedInstructionDataCodec,
    "getAssignWithSeedInstructionDataDecoder": ()=>getAssignWithSeedInstructionDataDecoder,
    "getAssignWithSeedInstructionDataEncoder": ()=>getAssignWithSeedInstructionDataEncoder,
    "getAuthorizeNonceAccountDiscriminatorBytes": ()=>getAuthorizeNonceAccountDiscriminatorBytes,
    "getAuthorizeNonceAccountInstruction": ()=>getAuthorizeNonceAccountInstruction,
    "getAuthorizeNonceAccountInstructionDataCodec": ()=>getAuthorizeNonceAccountInstructionDataCodec,
    "getAuthorizeNonceAccountInstructionDataDecoder": ()=>getAuthorizeNonceAccountInstructionDataDecoder,
    "getAuthorizeNonceAccountInstructionDataEncoder": ()=>getAuthorizeNonceAccountInstructionDataEncoder,
    "getCreateAccountDiscriminatorBytes": ()=>getCreateAccountDiscriminatorBytes,
    "getCreateAccountInstruction": ()=>getCreateAccountInstruction,
    "getCreateAccountInstructionDataCodec": ()=>getCreateAccountInstructionDataCodec,
    "getCreateAccountInstructionDataDecoder": ()=>getCreateAccountInstructionDataDecoder,
    "getCreateAccountInstructionDataEncoder": ()=>getCreateAccountInstructionDataEncoder,
    "getCreateAccountWithSeedDiscriminatorBytes": ()=>getCreateAccountWithSeedDiscriminatorBytes,
    "getCreateAccountWithSeedInstruction": ()=>getCreateAccountWithSeedInstruction,
    "getCreateAccountWithSeedInstructionDataCodec": ()=>getCreateAccountWithSeedInstructionDataCodec,
    "getCreateAccountWithSeedInstructionDataDecoder": ()=>getCreateAccountWithSeedInstructionDataDecoder,
    "getCreateAccountWithSeedInstructionDataEncoder": ()=>getCreateAccountWithSeedInstructionDataEncoder,
    "getInitializeNonceAccountDiscriminatorBytes": ()=>getInitializeNonceAccountDiscriminatorBytes,
    "getInitializeNonceAccountInstruction": ()=>getInitializeNonceAccountInstruction,
    "getInitializeNonceAccountInstructionDataCodec": ()=>getInitializeNonceAccountInstructionDataCodec,
    "getInitializeNonceAccountInstructionDataDecoder": ()=>getInitializeNonceAccountInstructionDataDecoder,
    "getInitializeNonceAccountInstructionDataEncoder": ()=>getInitializeNonceAccountInstructionDataEncoder,
    "getNonceCodec": ()=>getNonceCodec,
    "getNonceDecoder": ()=>getNonceDecoder,
    "getNonceEncoder": ()=>getNonceEncoder,
    "getNonceSize": ()=>getNonceSize,
    "getNonceStateCodec": ()=>getNonceStateCodec,
    "getNonceStateDecoder": ()=>getNonceStateDecoder,
    "getNonceStateEncoder": ()=>getNonceStateEncoder,
    "getNonceVersionCodec": ()=>getNonceVersionCodec,
    "getNonceVersionDecoder": ()=>getNonceVersionDecoder,
    "getNonceVersionEncoder": ()=>getNonceVersionEncoder,
    "getSystemErrorMessage": ()=>getSystemErrorMessage,
    "getTransferSolDiscriminatorBytes": ()=>getTransferSolDiscriminatorBytes,
    "getTransferSolInstruction": ()=>getTransferSolInstruction,
    "getTransferSolInstructionDataCodec": ()=>getTransferSolInstructionDataCodec,
    "getTransferSolInstructionDataDecoder": ()=>getTransferSolInstructionDataDecoder,
    "getTransferSolInstructionDataEncoder": ()=>getTransferSolInstructionDataEncoder,
    "getTransferSolWithSeedDiscriminatorBytes": ()=>getTransferSolWithSeedDiscriminatorBytes,
    "getTransferSolWithSeedInstruction": ()=>getTransferSolWithSeedInstruction,
    "getTransferSolWithSeedInstructionDataCodec": ()=>getTransferSolWithSeedInstructionDataCodec,
    "getTransferSolWithSeedInstructionDataDecoder": ()=>getTransferSolWithSeedInstructionDataDecoder,
    "getTransferSolWithSeedInstructionDataEncoder": ()=>getTransferSolWithSeedInstructionDataEncoder,
    "getUpgradeNonceAccountDiscriminatorBytes": ()=>getUpgradeNonceAccountDiscriminatorBytes,
    "getUpgradeNonceAccountInstruction": ()=>getUpgradeNonceAccountInstruction,
    "getUpgradeNonceAccountInstructionDataCodec": ()=>getUpgradeNonceAccountInstructionDataCodec,
    "getUpgradeNonceAccountInstructionDataDecoder": ()=>getUpgradeNonceAccountInstructionDataDecoder,
    "getUpgradeNonceAccountInstructionDataEncoder": ()=>getUpgradeNonceAccountInstructionDataEncoder,
    "getWithdrawNonceAccountDiscriminatorBytes": ()=>getWithdrawNonceAccountDiscriminatorBytes,
    "getWithdrawNonceAccountInstruction": ()=>getWithdrawNonceAccountInstruction,
    "getWithdrawNonceAccountInstructionDataCodec": ()=>getWithdrawNonceAccountInstructionDataCodec,
    "getWithdrawNonceAccountInstructionDataDecoder": ()=>getWithdrawNonceAccountInstructionDataDecoder,
    "getWithdrawNonceAccountInstructionDataEncoder": ()=>getWithdrawNonceAccountInstructionDataEncoder,
    "identifySystemInstruction": ()=>identifySystemInstruction,
    "isSystemError": ()=>isSystemError,
    "parseAdvanceNonceAccountInstruction": ()=>parseAdvanceNonceAccountInstruction,
    "parseAllocateInstruction": ()=>parseAllocateInstruction,
    "parseAllocateWithSeedInstruction": ()=>parseAllocateWithSeedInstruction,
    "parseAssignInstruction": ()=>parseAssignInstruction,
    "parseAssignWithSeedInstruction": ()=>parseAssignWithSeedInstruction,
    "parseAuthorizeNonceAccountInstruction": ()=>parseAuthorizeNonceAccountInstruction,
    "parseCreateAccountInstruction": ()=>parseCreateAccountInstruction,
    "parseCreateAccountWithSeedInstruction": ()=>parseCreateAccountWithSeedInstruction,
    "parseInitializeNonceAccountInstruction": ()=>parseInitializeNonceAccountInstruction,
    "parseTransferSolInstruction": ()=>parseTransferSolInstruction,
    "parseTransferSolWithSeedInstruction": ()=>parseTransferSolWithSeedInstruction,
    "parseUpgradeNonceAccountInstruction": ()=>parseUpgradeNonceAccountInstruction,
    "parseWithdrawNonceAccountInstruction": ()=>parseWithdrawNonceAccountInstruction
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$polyfills$2f$process$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = /*#__PURE__*/ __turbopack_context__.i("[project]/node_modules/next/dist/build/polyfills/process.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$codecs$2f$node_modules$2f40$solana$2f$codecs$2d$data$2d$structures$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@solana/codecs/node_modules/@solana/codecs-data-structures/dist/index.browser.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$codecs$2f$node_modules$2f40$solana$2f$codecs$2d$numbers$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@solana/codecs/node_modules/@solana/codecs-numbers/dist/index.browser.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$codecs$2f$node_modules$2f40$solana$2f$codecs$2d$core$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@solana/codecs/node_modules/@solana/codecs-core/dist/index.browser.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$kit$2f$node_modules$2f40$solana$2f$addresses$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@solana/kit/node_modules/@solana/addresses/dist/index.browser.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$accounts$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@solana/accounts/dist/index.browser.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$programs$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@solana/programs/dist/index.browser.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$codecs$2f$node_modules$2f40$solana$2f$codecs$2d$strings$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@solana/codecs/node_modules/@solana/codecs-strings/dist/index.browser.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$kit$2f$node_modules$2f40$solana$2f$instructions$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@solana/kit/node_modules/@solana/instructions/dist/index.browser.mjs [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$kit$2f$node_modules$2f40$solana$2f$signers$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/@solana/kit/node_modules/@solana/signers/dist/index.browser.mjs [app-client] (ecmascript)");
;
// src/generated/accounts/nonce.ts
var NonceState = /* @__PURE__ */ ((NonceState2)=>{
    NonceState2[NonceState2["Uninitialized"] = 0] = "Uninitialized";
    NonceState2[NonceState2["Initialized"] = 1] = "Initialized";
    return NonceState2;
})(NonceState || {});
function getNonceStateEncoder() {
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$codecs$2f$node_modules$2f40$solana$2f$codecs$2d$data$2d$structures$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getEnumEncoder"])(NonceState, {
        size: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$codecs$2f$node_modules$2f40$solana$2f$codecs$2d$numbers$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getU32Encoder"])()
    });
}
function getNonceStateDecoder() {
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$codecs$2f$node_modules$2f40$solana$2f$codecs$2d$data$2d$structures$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getEnumDecoder"])(NonceState, {
        size: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$codecs$2f$node_modules$2f40$solana$2f$codecs$2d$numbers$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getU32Decoder"])()
    });
}
function getNonceStateCodec() {
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$codecs$2f$node_modules$2f40$solana$2f$codecs$2d$core$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["combineCodec"])(getNonceStateEncoder(), getNonceStateDecoder());
}
var NonceVersion = /* @__PURE__ */ ((NonceVersion2)=>{
    NonceVersion2[NonceVersion2["Legacy"] = 0] = "Legacy";
    NonceVersion2[NonceVersion2["Current"] = 1] = "Current";
    return NonceVersion2;
})(NonceVersion || {});
function getNonceVersionEncoder() {
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$codecs$2f$node_modules$2f40$solana$2f$codecs$2d$data$2d$structures$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getEnumEncoder"])(NonceVersion, {
        size: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$codecs$2f$node_modules$2f40$solana$2f$codecs$2d$numbers$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getU32Encoder"])()
    });
}
function getNonceVersionDecoder() {
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$codecs$2f$node_modules$2f40$solana$2f$codecs$2d$data$2d$structures$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getEnumDecoder"])(NonceVersion, {
        size: (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$codecs$2f$node_modules$2f40$solana$2f$codecs$2d$numbers$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getU32Decoder"])()
    });
}
function getNonceVersionCodec() {
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$codecs$2f$node_modules$2f40$solana$2f$codecs$2d$core$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["combineCodec"])(getNonceVersionEncoder(), getNonceVersionDecoder());
}
// src/generated/accounts/nonce.ts
function getNonceEncoder() {
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$codecs$2f$node_modules$2f40$solana$2f$codecs$2d$data$2d$structures$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getStructEncoder"])([
        [
            "version",
            getNonceVersionEncoder()
        ],
        [
            "state",
            getNonceStateEncoder()
        ],
        [
            "authority",
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$kit$2f$node_modules$2f40$solana$2f$addresses$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getAddressEncoder"])()
        ],
        [
            "blockhash",
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$kit$2f$node_modules$2f40$solana$2f$addresses$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getAddressEncoder"])()
        ],
        [
            "lamportsPerSignature",
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$codecs$2f$node_modules$2f40$solana$2f$codecs$2d$numbers$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getU64Encoder"])()
        ]
    ]);
}
function getNonceDecoder() {
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$codecs$2f$node_modules$2f40$solana$2f$codecs$2d$data$2d$structures$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getStructDecoder"])([
        [
            "version",
            getNonceVersionDecoder()
        ],
        [
            "state",
            getNonceStateDecoder()
        ],
        [
            "authority",
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$kit$2f$node_modules$2f40$solana$2f$addresses$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getAddressDecoder"])()
        ],
        [
            "blockhash",
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$kit$2f$node_modules$2f40$solana$2f$addresses$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getAddressDecoder"])()
        ],
        [
            "lamportsPerSignature",
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$codecs$2f$node_modules$2f40$solana$2f$codecs$2d$numbers$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getU64Decoder"])()
        ]
    ]);
}
function getNonceCodec() {
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$codecs$2f$node_modules$2f40$solana$2f$codecs$2d$core$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["combineCodec"])(getNonceEncoder(), getNonceDecoder());
}
function decodeNonce(encodedAccount) {
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$accounts$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["decodeAccount"])(encodedAccount, getNonceDecoder());
}
async function fetchNonce(rpc, address, config) {
    const maybeAccount = await fetchMaybeNonce(rpc, address, config);
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$accounts$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["assertAccountExists"])(maybeAccount);
    return maybeAccount;
}
async function fetchMaybeNonce(rpc, address, config) {
    const maybeAccount = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$accounts$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["fetchEncodedAccount"])(rpc, address, config);
    return decodeNonce(maybeAccount);
}
async function fetchAllNonce(rpc, addresses, config) {
    const maybeAccounts = await fetchAllMaybeNonce(rpc, addresses, config);
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$accounts$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["assertAccountsExist"])(maybeAccounts);
    return maybeAccounts;
}
async function fetchAllMaybeNonce(rpc, addresses, config) {
    const maybeAccounts = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$accounts$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["fetchEncodedAccounts"])(rpc, addresses, config);
    return maybeAccounts.map((maybeAccount)=>decodeNonce(maybeAccount));
}
function getNonceSize() {
    return 80;
}
var SYSTEM_PROGRAM_ADDRESS = "11111111111111111111111111111111";
var SystemAccount = /* @__PURE__ */ ((SystemAccount2)=>{
    SystemAccount2[SystemAccount2["Nonce"] = 0] = "Nonce";
    return SystemAccount2;
})(SystemAccount || {});
var SystemInstruction = /* @__PURE__ */ ((SystemInstruction2)=>{
    SystemInstruction2[SystemInstruction2["CreateAccount"] = 0] = "CreateAccount";
    SystemInstruction2[SystemInstruction2["Assign"] = 1] = "Assign";
    SystemInstruction2[SystemInstruction2["TransferSol"] = 2] = "TransferSol";
    SystemInstruction2[SystemInstruction2["CreateAccountWithSeed"] = 3] = "CreateAccountWithSeed";
    SystemInstruction2[SystemInstruction2["AdvanceNonceAccount"] = 4] = "AdvanceNonceAccount";
    SystemInstruction2[SystemInstruction2["WithdrawNonceAccount"] = 5] = "WithdrawNonceAccount";
    SystemInstruction2[SystemInstruction2["InitializeNonceAccount"] = 6] = "InitializeNonceAccount";
    SystemInstruction2[SystemInstruction2["AuthorizeNonceAccount"] = 7] = "AuthorizeNonceAccount";
    SystemInstruction2[SystemInstruction2["Allocate"] = 8] = "Allocate";
    SystemInstruction2[SystemInstruction2["AllocateWithSeed"] = 9] = "AllocateWithSeed";
    SystemInstruction2[SystemInstruction2["AssignWithSeed"] = 10] = "AssignWithSeed";
    SystemInstruction2[SystemInstruction2["TransferSolWithSeed"] = 11] = "TransferSolWithSeed";
    SystemInstruction2[SystemInstruction2["UpgradeNonceAccount"] = 12] = "UpgradeNonceAccount";
    return SystemInstruction2;
})(SystemInstruction || {});
function identifySystemInstruction(instruction) {
    const data = "data" in instruction ? instruction.data : instruction;
    if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$codecs$2f$node_modules$2f40$solana$2f$codecs$2d$core$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["containsBytes"])(data, (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$codecs$2f$node_modules$2f40$solana$2f$codecs$2d$numbers$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getU32Encoder"])().encode(0), 0)) {
        return 0 /* CreateAccount */ ;
    }
    if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$codecs$2f$node_modules$2f40$solana$2f$codecs$2d$core$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["containsBytes"])(data, (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$codecs$2f$node_modules$2f40$solana$2f$codecs$2d$numbers$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getU32Encoder"])().encode(1), 0)) {
        return 1 /* Assign */ ;
    }
    if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$codecs$2f$node_modules$2f40$solana$2f$codecs$2d$core$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["containsBytes"])(data, (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$codecs$2f$node_modules$2f40$solana$2f$codecs$2d$numbers$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getU32Encoder"])().encode(2), 0)) {
        return 2 /* TransferSol */ ;
    }
    if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$codecs$2f$node_modules$2f40$solana$2f$codecs$2d$core$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["containsBytes"])(data, (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$codecs$2f$node_modules$2f40$solana$2f$codecs$2d$numbers$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getU32Encoder"])().encode(3), 0)) {
        return 3 /* CreateAccountWithSeed */ ;
    }
    if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$codecs$2f$node_modules$2f40$solana$2f$codecs$2d$core$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["containsBytes"])(data, (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$codecs$2f$node_modules$2f40$solana$2f$codecs$2d$numbers$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getU32Encoder"])().encode(4), 0)) {
        return 4 /* AdvanceNonceAccount */ ;
    }
    if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$codecs$2f$node_modules$2f40$solana$2f$codecs$2d$core$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["containsBytes"])(data, (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$codecs$2f$node_modules$2f40$solana$2f$codecs$2d$numbers$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getU32Encoder"])().encode(5), 0)) {
        return 5 /* WithdrawNonceAccount */ ;
    }
    if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$codecs$2f$node_modules$2f40$solana$2f$codecs$2d$core$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["containsBytes"])(data, (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$codecs$2f$node_modules$2f40$solana$2f$codecs$2d$numbers$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getU32Encoder"])().encode(6), 0)) {
        return 6 /* InitializeNonceAccount */ ;
    }
    if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$codecs$2f$node_modules$2f40$solana$2f$codecs$2d$core$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["containsBytes"])(data, (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$codecs$2f$node_modules$2f40$solana$2f$codecs$2d$numbers$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getU32Encoder"])().encode(7), 0)) {
        return 7 /* AuthorizeNonceAccount */ ;
    }
    if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$codecs$2f$node_modules$2f40$solana$2f$codecs$2d$core$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["containsBytes"])(data, (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$codecs$2f$node_modules$2f40$solana$2f$codecs$2d$numbers$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getU32Encoder"])().encode(8), 0)) {
        return 8 /* Allocate */ ;
    }
    if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$codecs$2f$node_modules$2f40$solana$2f$codecs$2d$core$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["containsBytes"])(data, (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$codecs$2f$node_modules$2f40$solana$2f$codecs$2d$numbers$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getU32Encoder"])().encode(9), 0)) {
        return 9 /* AllocateWithSeed */ ;
    }
    if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$codecs$2f$node_modules$2f40$solana$2f$codecs$2d$core$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["containsBytes"])(data, (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$codecs$2f$node_modules$2f40$solana$2f$codecs$2d$numbers$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getU32Encoder"])().encode(10), 0)) {
        return 10 /* AssignWithSeed */ ;
    }
    if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$codecs$2f$node_modules$2f40$solana$2f$codecs$2d$core$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["containsBytes"])(data, (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$codecs$2f$node_modules$2f40$solana$2f$codecs$2d$numbers$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getU32Encoder"])().encode(11), 0)) {
        return 11 /* TransferSolWithSeed */ ;
    }
    if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$codecs$2f$node_modules$2f40$solana$2f$codecs$2d$core$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["containsBytes"])(data, (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$codecs$2f$node_modules$2f40$solana$2f$codecs$2d$numbers$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getU32Encoder"])().encode(12), 0)) {
        return 12 /* UpgradeNonceAccount */ ;
    }
    throw new Error("The provided instruction could not be identified as a system instruction.");
}
// src/generated/errors/system.ts
var SYSTEM_ERROR__ACCOUNT_ALREADY_IN_USE = 0;
var SYSTEM_ERROR__RESULT_WITH_NEGATIVE_LAMPORTS = 1;
var SYSTEM_ERROR__INVALID_PROGRAM_ID = 2;
var SYSTEM_ERROR__INVALID_ACCOUNT_DATA_LENGTH = 3;
var SYSTEM_ERROR__MAX_SEED_LENGTH_EXCEEDED = 4;
var SYSTEM_ERROR__ADDRESS_WITH_SEED_MISMATCH = 5;
var SYSTEM_ERROR__NONCE_NO_RECENT_BLOCKHASHES = 6;
var SYSTEM_ERROR__NONCE_BLOCKHASH_NOT_EXPIRED = 7;
var SYSTEM_ERROR__NONCE_UNEXPECTED_BLOCKHASH_VALUE = 8;
var systemErrorMessages;
if (("TURBOPACK compile-time value", "development") !== "production") {
    systemErrorMessages = {
        [SYSTEM_ERROR__ACCOUNT_ALREADY_IN_USE]: "an account with the same address already exists",
        [SYSTEM_ERROR__ADDRESS_WITH_SEED_MISMATCH]: "provided address does not match addressed derived from seed",
        [SYSTEM_ERROR__INVALID_ACCOUNT_DATA_LENGTH]: "cannot allocate account data of this length",
        [SYSTEM_ERROR__INVALID_PROGRAM_ID]: "cannot assign account to this program id",
        [SYSTEM_ERROR__MAX_SEED_LENGTH_EXCEEDED]: "length of requested seed is too long",
        [SYSTEM_ERROR__NONCE_BLOCKHASH_NOT_EXPIRED]: "stored nonce is still in recent_blockhashes",
        [SYSTEM_ERROR__NONCE_NO_RECENT_BLOCKHASHES]: "advancing stored nonce requires a populated RecentBlockhashes sysvar",
        [SYSTEM_ERROR__NONCE_UNEXPECTED_BLOCKHASH_VALUE]: "specified nonce does not match stored nonce",
        [SYSTEM_ERROR__RESULT_WITH_NEGATIVE_LAMPORTS]: "account does not have enough SOL to perform the operation"
    };
}
function getSystemErrorMessage(code) {
    if ("TURBOPACK compile-time truthy", 1) {
        return systemErrorMessages[code];
    }
    //TURBOPACK unreachable
    ;
}
function isSystemError(error, transactionMessage, code) {
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$programs$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isProgramError"])(error, transactionMessage, SYSTEM_PROGRAM_ADDRESS, code);
}
function expectAddress(value) {
    if (!value) {
        throw new Error("Expected a Address.");
    }
    if (typeof value === "object" && "address" in value) {
        return value.address;
    }
    if (Array.isArray(value)) {
        return value[0];
    }
    return value;
}
function getAccountMetaFactory(programAddress, optionalAccountStrategy) {
    return (account)=>{
        if (!account.value) {
            return Object.freeze({
                address: programAddress,
                role: __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$kit$2f$node_modules$2f40$solana$2f$instructions$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["AccountRole"].READONLY
            });
        }
        const writableRole = account.isWritable ? __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$kit$2f$node_modules$2f40$solana$2f$instructions$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["AccountRole"].WRITABLE : __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$kit$2f$node_modules$2f40$solana$2f$instructions$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["AccountRole"].READONLY;
        return Object.freeze({
            address: expectAddress(account.value),
            role: isTransactionSigner(account.value) ? (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$kit$2f$node_modules$2f40$solana$2f$instructions$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["upgradeRoleToSigner"])(writableRole) : writableRole,
            ...isTransactionSigner(account.value) ? {
                signer: account.value
            } : {}
        });
    };
}
function isTransactionSigner(value) {
    return !!value && typeof value === "object" && "address" in value && (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$kit$2f$node_modules$2f40$solana$2f$signers$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isTransactionSigner"])(value);
}
// src/generated/instructions/advanceNonceAccount.ts
var ADVANCE_NONCE_ACCOUNT_DISCRIMINATOR = 4;
function getAdvanceNonceAccountDiscriminatorBytes() {
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$codecs$2f$node_modules$2f40$solana$2f$codecs$2d$numbers$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getU32Encoder"])().encode(ADVANCE_NONCE_ACCOUNT_DISCRIMINATOR);
}
function getAdvanceNonceAccountInstructionDataEncoder() {
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$codecs$2f$node_modules$2f40$solana$2f$codecs$2d$core$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["transformEncoder"])((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$codecs$2f$node_modules$2f40$solana$2f$codecs$2d$data$2d$structures$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getStructEncoder"])([
        [
            "discriminator",
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$codecs$2f$node_modules$2f40$solana$2f$codecs$2d$numbers$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getU32Encoder"])()
        ]
    ]), (value)=>({
            ...value,
            discriminator: ADVANCE_NONCE_ACCOUNT_DISCRIMINATOR
        }));
}
function getAdvanceNonceAccountInstructionDataDecoder() {
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$codecs$2f$node_modules$2f40$solana$2f$codecs$2d$data$2d$structures$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getStructDecoder"])([
        [
            "discriminator",
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$codecs$2f$node_modules$2f40$solana$2f$codecs$2d$numbers$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getU32Decoder"])()
        ]
    ]);
}
function getAdvanceNonceAccountInstructionDataCodec() {
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$codecs$2f$node_modules$2f40$solana$2f$codecs$2d$core$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["combineCodec"])(getAdvanceNonceAccountInstructionDataEncoder(), getAdvanceNonceAccountInstructionDataDecoder());
}
function getAdvanceNonceAccountInstruction(input, config) {
    var _config_programAddress;
    const programAddress = (_config_programAddress = config === null || config === void 0 ? void 0 : config.programAddress) !== null && _config_programAddress !== void 0 ? _config_programAddress : SYSTEM_PROGRAM_ADDRESS;
    var _input_nonceAccount, _input_recentBlockhashesSysvar, _input_nonceAuthority;
    const originalAccounts = {
        nonceAccount: {
            value: (_input_nonceAccount = input.nonceAccount) !== null && _input_nonceAccount !== void 0 ? _input_nonceAccount : null,
            isWritable: true
        },
        recentBlockhashesSysvar: {
            value: (_input_recentBlockhashesSysvar = input.recentBlockhashesSysvar) !== null && _input_recentBlockhashesSysvar !== void 0 ? _input_recentBlockhashesSysvar : null,
            isWritable: false
        },
        nonceAuthority: {
            value: (_input_nonceAuthority = input.nonceAuthority) !== null && _input_nonceAuthority !== void 0 ? _input_nonceAuthority : null,
            isWritable: false
        }
    };
    const accounts = originalAccounts;
    if (!accounts.recentBlockhashesSysvar.value) {
        accounts.recentBlockhashesSysvar.value = "SysvarRecentB1ockHashes11111111111111111111";
    }
    const getAccountMeta = getAccountMetaFactory(programAddress);
    const instruction = {
        accounts: [
            getAccountMeta(accounts.nonceAccount),
            getAccountMeta(accounts.recentBlockhashesSysvar),
            getAccountMeta(accounts.nonceAuthority)
        ],
        programAddress,
        data: getAdvanceNonceAccountInstructionDataEncoder().encode({})
    };
    return instruction;
}
function parseAdvanceNonceAccountInstruction(instruction) {
    if (instruction.accounts.length < 3) {
        throw new Error("Not enough accounts");
    }
    let accountIndex = 0;
    const getNextAccount = ()=>{
        const accountMeta = instruction.accounts[accountIndex];
        accountIndex += 1;
        return accountMeta;
    };
    return {
        programAddress: instruction.programAddress,
        accounts: {
            nonceAccount: getNextAccount(),
            recentBlockhashesSysvar: getNextAccount(),
            nonceAuthority: getNextAccount()
        },
        data: getAdvanceNonceAccountInstructionDataDecoder().decode(instruction.data)
    };
}
var ALLOCATE_DISCRIMINATOR = 8;
function getAllocateDiscriminatorBytes() {
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$codecs$2f$node_modules$2f40$solana$2f$codecs$2d$numbers$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getU32Encoder"])().encode(ALLOCATE_DISCRIMINATOR);
}
function getAllocateInstructionDataEncoder() {
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$codecs$2f$node_modules$2f40$solana$2f$codecs$2d$core$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["transformEncoder"])((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$codecs$2f$node_modules$2f40$solana$2f$codecs$2d$data$2d$structures$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getStructEncoder"])([
        [
            "discriminator",
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$codecs$2f$node_modules$2f40$solana$2f$codecs$2d$numbers$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getU32Encoder"])()
        ],
        [
            "space",
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$codecs$2f$node_modules$2f40$solana$2f$codecs$2d$numbers$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getU64Encoder"])()
        ]
    ]), (value)=>({
            ...value,
            discriminator: ALLOCATE_DISCRIMINATOR
        }));
}
function getAllocateInstructionDataDecoder() {
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$codecs$2f$node_modules$2f40$solana$2f$codecs$2d$data$2d$structures$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getStructDecoder"])([
        [
            "discriminator",
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$codecs$2f$node_modules$2f40$solana$2f$codecs$2d$numbers$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getU32Decoder"])()
        ],
        [
            "space",
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$codecs$2f$node_modules$2f40$solana$2f$codecs$2d$numbers$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getU64Decoder"])()
        ]
    ]);
}
function getAllocateInstructionDataCodec() {
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$codecs$2f$node_modules$2f40$solana$2f$codecs$2d$core$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["combineCodec"])(getAllocateInstructionDataEncoder(), getAllocateInstructionDataDecoder());
}
function getAllocateInstruction(input, config) {
    var _config_programAddress;
    const programAddress = (_config_programAddress = config === null || config === void 0 ? void 0 : config.programAddress) !== null && _config_programAddress !== void 0 ? _config_programAddress : SYSTEM_PROGRAM_ADDRESS;
    var _input_newAccount;
    const originalAccounts = {
        newAccount: {
            value: (_input_newAccount = input.newAccount) !== null && _input_newAccount !== void 0 ? _input_newAccount : null,
            isWritable: true
        }
    };
    const accounts = originalAccounts;
    const args = {
        ...input
    };
    const getAccountMeta = getAccountMetaFactory(programAddress);
    const instruction = {
        accounts: [
            getAccountMeta(accounts.newAccount)
        ],
        programAddress,
        data: getAllocateInstructionDataEncoder().encode(args)
    };
    return instruction;
}
function parseAllocateInstruction(instruction) {
    if (instruction.accounts.length < 1) {
        throw new Error("Not enough accounts");
    }
    let accountIndex = 0;
    const getNextAccount = ()=>{
        const accountMeta = instruction.accounts[accountIndex];
        accountIndex += 1;
        return accountMeta;
    };
    return {
        programAddress: instruction.programAddress,
        accounts: {
            newAccount: getNextAccount()
        },
        data: getAllocateInstructionDataDecoder().decode(instruction.data)
    };
}
var ALLOCATE_WITH_SEED_DISCRIMINATOR = 9;
function getAllocateWithSeedDiscriminatorBytes() {
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$codecs$2f$node_modules$2f40$solana$2f$codecs$2d$numbers$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getU32Encoder"])().encode(ALLOCATE_WITH_SEED_DISCRIMINATOR);
}
function getAllocateWithSeedInstructionDataEncoder() {
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$codecs$2f$node_modules$2f40$solana$2f$codecs$2d$core$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["transformEncoder"])((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$codecs$2f$node_modules$2f40$solana$2f$codecs$2d$data$2d$structures$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getStructEncoder"])([
        [
            "discriminator",
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$codecs$2f$node_modules$2f40$solana$2f$codecs$2d$numbers$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getU32Encoder"])()
        ],
        [
            "base",
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$kit$2f$node_modules$2f40$solana$2f$addresses$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getAddressEncoder"])()
        ],
        [
            "seed",
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$codecs$2f$node_modules$2f40$solana$2f$codecs$2d$core$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["addEncoderSizePrefix"])((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$codecs$2f$node_modules$2f40$solana$2f$codecs$2d$strings$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getUtf8Encoder"])(), (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$codecs$2f$node_modules$2f40$solana$2f$codecs$2d$numbers$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getU64Encoder"])())
        ],
        [
            "space",
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$codecs$2f$node_modules$2f40$solana$2f$codecs$2d$numbers$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getU64Encoder"])()
        ],
        [
            "programAddress",
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$kit$2f$node_modules$2f40$solana$2f$addresses$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getAddressEncoder"])()
        ]
    ]), (value)=>({
            ...value,
            discriminator: ALLOCATE_WITH_SEED_DISCRIMINATOR
        }));
}
function getAllocateWithSeedInstructionDataDecoder() {
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$codecs$2f$node_modules$2f40$solana$2f$codecs$2d$data$2d$structures$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getStructDecoder"])([
        [
            "discriminator",
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$codecs$2f$node_modules$2f40$solana$2f$codecs$2d$numbers$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getU32Decoder"])()
        ],
        [
            "base",
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$kit$2f$node_modules$2f40$solana$2f$addresses$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getAddressDecoder"])()
        ],
        [
            "seed",
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$codecs$2f$node_modules$2f40$solana$2f$codecs$2d$core$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["addDecoderSizePrefix"])((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$codecs$2f$node_modules$2f40$solana$2f$codecs$2d$strings$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getUtf8Decoder"])(), (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$codecs$2f$node_modules$2f40$solana$2f$codecs$2d$numbers$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getU64Decoder"])())
        ],
        [
            "space",
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$codecs$2f$node_modules$2f40$solana$2f$codecs$2d$numbers$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getU64Decoder"])()
        ],
        [
            "programAddress",
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$kit$2f$node_modules$2f40$solana$2f$addresses$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getAddressDecoder"])()
        ]
    ]);
}
function getAllocateWithSeedInstructionDataCodec() {
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$codecs$2f$node_modules$2f40$solana$2f$codecs$2d$core$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["combineCodec"])(getAllocateWithSeedInstructionDataEncoder(), getAllocateWithSeedInstructionDataDecoder());
}
function getAllocateWithSeedInstruction(input, config) {
    var _config_programAddress;
    const programAddress = (_config_programAddress = config === null || config === void 0 ? void 0 : config.programAddress) !== null && _config_programAddress !== void 0 ? _config_programAddress : SYSTEM_PROGRAM_ADDRESS;
    var _input_newAccount, _input_baseAccount;
    const originalAccounts = {
        newAccount: {
            value: (_input_newAccount = input.newAccount) !== null && _input_newAccount !== void 0 ? _input_newAccount : null,
            isWritable: true
        },
        baseAccount: {
            value: (_input_baseAccount = input.baseAccount) !== null && _input_baseAccount !== void 0 ? _input_baseAccount : null,
            isWritable: false
        }
    };
    const accounts = originalAccounts;
    const args = {
        ...input
    };
    const getAccountMeta = getAccountMetaFactory(programAddress);
    const instruction = {
        accounts: [
            getAccountMeta(accounts.newAccount),
            getAccountMeta(accounts.baseAccount)
        ],
        programAddress,
        data: getAllocateWithSeedInstructionDataEncoder().encode(args)
    };
    return instruction;
}
function parseAllocateWithSeedInstruction(instruction) {
    if (instruction.accounts.length < 2) {
        throw new Error("Not enough accounts");
    }
    let accountIndex = 0;
    const getNextAccount = ()=>{
        const accountMeta = instruction.accounts[accountIndex];
        accountIndex += 1;
        return accountMeta;
    };
    return {
        programAddress: instruction.programAddress,
        accounts: {
            newAccount: getNextAccount(),
            baseAccount: getNextAccount()
        },
        data: getAllocateWithSeedInstructionDataDecoder().decode(instruction.data)
    };
}
var ASSIGN_DISCRIMINATOR = 1;
function getAssignDiscriminatorBytes() {
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$codecs$2f$node_modules$2f40$solana$2f$codecs$2d$numbers$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getU32Encoder"])().encode(ASSIGN_DISCRIMINATOR);
}
function getAssignInstructionDataEncoder() {
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$codecs$2f$node_modules$2f40$solana$2f$codecs$2d$core$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["transformEncoder"])((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$codecs$2f$node_modules$2f40$solana$2f$codecs$2d$data$2d$structures$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getStructEncoder"])([
        [
            "discriminator",
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$codecs$2f$node_modules$2f40$solana$2f$codecs$2d$numbers$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getU32Encoder"])()
        ],
        [
            "programAddress",
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$kit$2f$node_modules$2f40$solana$2f$addresses$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getAddressEncoder"])()
        ]
    ]), (value)=>({
            ...value,
            discriminator: ASSIGN_DISCRIMINATOR
        }));
}
function getAssignInstructionDataDecoder() {
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$codecs$2f$node_modules$2f40$solana$2f$codecs$2d$data$2d$structures$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getStructDecoder"])([
        [
            "discriminator",
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$codecs$2f$node_modules$2f40$solana$2f$codecs$2d$numbers$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getU32Decoder"])()
        ],
        [
            "programAddress",
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$kit$2f$node_modules$2f40$solana$2f$addresses$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getAddressDecoder"])()
        ]
    ]);
}
function getAssignInstructionDataCodec() {
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$codecs$2f$node_modules$2f40$solana$2f$codecs$2d$core$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["combineCodec"])(getAssignInstructionDataEncoder(), getAssignInstructionDataDecoder());
}
function getAssignInstruction(input, config) {
    var _config_programAddress;
    const programAddress = (_config_programAddress = config === null || config === void 0 ? void 0 : config.programAddress) !== null && _config_programAddress !== void 0 ? _config_programAddress : SYSTEM_PROGRAM_ADDRESS;
    var _input_account;
    const originalAccounts = {
        account: {
            value: (_input_account = input.account) !== null && _input_account !== void 0 ? _input_account : null,
            isWritable: true
        }
    };
    const accounts = originalAccounts;
    const args = {
        ...input
    };
    const getAccountMeta = getAccountMetaFactory(programAddress);
    const instruction = {
        accounts: [
            getAccountMeta(accounts.account)
        ],
        programAddress,
        data: getAssignInstructionDataEncoder().encode(args)
    };
    return instruction;
}
function parseAssignInstruction(instruction) {
    if (instruction.accounts.length < 1) {
        throw new Error("Not enough accounts");
    }
    let accountIndex = 0;
    const getNextAccount = ()=>{
        const accountMeta = instruction.accounts[accountIndex];
        accountIndex += 1;
        return accountMeta;
    };
    return {
        programAddress: instruction.programAddress,
        accounts: {
            account: getNextAccount()
        },
        data: getAssignInstructionDataDecoder().decode(instruction.data)
    };
}
var ASSIGN_WITH_SEED_DISCRIMINATOR = 10;
function getAssignWithSeedDiscriminatorBytes() {
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$codecs$2f$node_modules$2f40$solana$2f$codecs$2d$numbers$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getU32Encoder"])().encode(ASSIGN_WITH_SEED_DISCRIMINATOR);
}
function getAssignWithSeedInstructionDataEncoder() {
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$codecs$2f$node_modules$2f40$solana$2f$codecs$2d$core$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["transformEncoder"])((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$codecs$2f$node_modules$2f40$solana$2f$codecs$2d$data$2d$structures$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getStructEncoder"])([
        [
            "discriminator",
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$codecs$2f$node_modules$2f40$solana$2f$codecs$2d$numbers$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getU32Encoder"])()
        ],
        [
            "base",
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$kit$2f$node_modules$2f40$solana$2f$addresses$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getAddressEncoder"])()
        ],
        [
            "seed",
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$codecs$2f$node_modules$2f40$solana$2f$codecs$2d$core$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["addEncoderSizePrefix"])((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$codecs$2f$node_modules$2f40$solana$2f$codecs$2d$strings$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getUtf8Encoder"])(), (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$codecs$2f$node_modules$2f40$solana$2f$codecs$2d$numbers$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getU64Encoder"])())
        ],
        [
            "programAddress",
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$kit$2f$node_modules$2f40$solana$2f$addresses$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getAddressEncoder"])()
        ]
    ]), (value)=>({
            ...value,
            discriminator: ASSIGN_WITH_SEED_DISCRIMINATOR
        }));
}
function getAssignWithSeedInstructionDataDecoder() {
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$codecs$2f$node_modules$2f40$solana$2f$codecs$2d$data$2d$structures$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getStructDecoder"])([
        [
            "discriminator",
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$codecs$2f$node_modules$2f40$solana$2f$codecs$2d$numbers$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getU32Decoder"])()
        ],
        [
            "base",
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$kit$2f$node_modules$2f40$solana$2f$addresses$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getAddressDecoder"])()
        ],
        [
            "seed",
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$codecs$2f$node_modules$2f40$solana$2f$codecs$2d$core$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["addDecoderSizePrefix"])((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$codecs$2f$node_modules$2f40$solana$2f$codecs$2d$strings$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getUtf8Decoder"])(), (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$codecs$2f$node_modules$2f40$solana$2f$codecs$2d$numbers$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getU64Decoder"])())
        ],
        [
            "programAddress",
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$kit$2f$node_modules$2f40$solana$2f$addresses$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getAddressDecoder"])()
        ]
    ]);
}
function getAssignWithSeedInstructionDataCodec() {
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$codecs$2f$node_modules$2f40$solana$2f$codecs$2d$core$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["combineCodec"])(getAssignWithSeedInstructionDataEncoder(), getAssignWithSeedInstructionDataDecoder());
}
function getAssignWithSeedInstruction(input, config) {
    var _config_programAddress;
    const programAddress = (_config_programAddress = config === null || config === void 0 ? void 0 : config.programAddress) !== null && _config_programAddress !== void 0 ? _config_programAddress : SYSTEM_PROGRAM_ADDRESS;
    var _input_account, _input_baseAccount;
    const originalAccounts = {
        account: {
            value: (_input_account = input.account) !== null && _input_account !== void 0 ? _input_account : null,
            isWritable: true
        },
        baseAccount: {
            value: (_input_baseAccount = input.baseAccount) !== null && _input_baseAccount !== void 0 ? _input_baseAccount : null,
            isWritable: false
        }
    };
    const accounts = originalAccounts;
    const args = {
        ...input
    };
    const getAccountMeta = getAccountMetaFactory(programAddress);
    const instruction = {
        accounts: [
            getAccountMeta(accounts.account),
            getAccountMeta(accounts.baseAccount)
        ],
        programAddress,
        data: getAssignWithSeedInstructionDataEncoder().encode(args)
    };
    return instruction;
}
function parseAssignWithSeedInstruction(instruction) {
    if (instruction.accounts.length < 2) {
        throw new Error("Not enough accounts");
    }
    let accountIndex = 0;
    const getNextAccount = ()=>{
        const accountMeta = instruction.accounts[accountIndex];
        accountIndex += 1;
        return accountMeta;
    };
    return {
        programAddress: instruction.programAddress,
        accounts: {
            account: getNextAccount(),
            baseAccount: getNextAccount()
        },
        data: getAssignWithSeedInstructionDataDecoder().decode(instruction.data)
    };
}
var AUTHORIZE_NONCE_ACCOUNT_DISCRIMINATOR = 7;
function getAuthorizeNonceAccountDiscriminatorBytes() {
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$codecs$2f$node_modules$2f40$solana$2f$codecs$2d$numbers$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getU32Encoder"])().encode(AUTHORIZE_NONCE_ACCOUNT_DISCRIMINATOR);
}
function getAuthorizeNonceAccountInstructionDataEncoder() {
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$codecs$2f$node_modules$2f40$solana$2f$codecs$2d$core$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["transformEncoder"])((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$codecs$2f$node_modules$2f40$solana$2f$codecs$2d$data$2d$structures$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getStructEncoder"])([
        [
            "discriminator",
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$codecs$2f$node_modules$2f40$solana$2f$codecs$2d$numbers$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getU32Encoder"])()
        ],
        [
            "newNonceAuthority",
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$kit$2f$node_modules$2f40$solana$2f$addresses$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getAddressEncoder"])()
        ]
    ]), (value)=>({
            ...value,
            discriminator: AUTHORIZE_NONCE_ACCOUNT_DISCRIMINATOR
        }));
}
function getAuthorizeNonceAccountInstructionDataDecoder() {
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$codecs$2f$node_modules$2f40$solana$2f$codecs$2d$data$2d$structures$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getStructDecoder"])([
        [
            "discriminator",
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$codecs$2f$node_modules$2f40$solana$2f$codecs$2d$numbers$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getU32Decoder"])()
        ],
        [
            "newNonceAuthority",
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$kit$2f$node_modules$2f40$solana$2f$addresses$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getAddressDecoder"])()
        ]
    ]);
}
function getAuthorizeNonceAccountInstructionDataCodec() {
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$codecs$2f$node_modules$2f40$solana$2f$codecs$2d$core$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["combineCodec"])(getAuthorizeNonceAccountInstructionDataEncoder(), getAuthorizeNonceAccountInstructionDataDecoder());
}
function getAuthorizeNonceAccountInstruction(input, config) {
    var _config_programAddress;
    const programAddress = (_config_programAddress = config === null || config === void 0 ? void 0 : config.programAddress) !== null && _config_programAddress !== void 0 ? _config_programAddress : SYSTEM_PROGRAM_ADDRESS;
    var _input_nonceAccount, _input_nonceAuthority;
    const originalAccounts = {
        nonceAccount: {
            value: (_input_nonceAccount = input.nonceAccount) !== null && _input_nonceAccount !== void 0 ? _input_nonceAccount : null,
            isWritable: true
        },
        nonceAuthority: {
            value: (_input_nonceAuthority = input.nonceAuthority) !== null && _input_nonceAuthority !== void 0 ? _input_nonceAuthority : null,
            isWritable: false
        }
    };
    const accounts = originalAccounts;
    const args = {
        ...input
    };
    const getAccountMeta = getAccountMetaFactory(programAddress);
    const instruction = {
        accounts: [
            getAccountMeta(accounts.nonceAccount),
            getAccountMeta(accounts.nonceAuthority)
        ],
        programAddress,
        data: getAuthorizeNonceAccountInstructionDataEncoder().encode(args)
    };
    return instruction;
}
function parseAuthorizeNonceAccountInstruction(instruction) {
    if (instruction.accounts.length < 2) {
        throw new Error("Not enough accounts");
    }
    let accountIndex = 0;
    const getNextAccount = ()=>{
        const accountMeta = instruction.accounts[accountIndex];
        accountIndex += 1;
        return accountMeta;
    };
    return {
        programAddress: instruction.programAddress,
        accounts: {
            nonceAccount: getNextAccount(),
            nonceAuthority: getNextAccount()
        },
        data: getAuthorizeNonceAccountInstructionDataDecoder().decode(instruction.data)
    };
}
var CREATE_ACCOUNT_DISCRIMINATOR = 0;
function getCreateAccountDiscriminatorBytes() {
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$codecs$2f$node_modules$2f40$solana$2f$codecs$2d$numbers$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getU32Encoder"])().encode(CREATE_ACCOUNT_DISCRIMINATOR);
}
function getCreateAccountInstructionDataEncoder() {
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$codecs$2f$node_modules$2f40$solana$2f$codecs$2d$core$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["transformEncoder"])((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$codecs$2f$node_modules$2f40$solana$2f$codecs$2d$data$2d$structures$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getStructEncoder"])([
        [
            "discriminator",
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$codecs$2f$node_modules$2f40$solana$2f$codecs$2d$numbers$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getU32Encoder"])()
        ],
        [
            "lamports",
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$codecs$2f$node_modules$2f40$solana$2f$codecs$2d$numbers$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getU64Encoder"])()
        ],
        [
            "space",
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$codecs$2f$node_modules$2f40$solana$2f$codecs$2d$numbers$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getU64Encoder"])()
        ],
        [
            "programAddress",
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$kit$2f$node_modules$2f40$solana$2f$addresses$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getAddressEncoder"])()
        ]
    ]), (value)=>({
            ...value,
            discriminator: CREATE_ACCOUNT_DISCRIMINATOR
        }));
}
function getCreateAccountInstructionDataDecoder() {
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$codecs$2f$node_modules$2f40$solana$2f$codecs$2d$data$2d$structures$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getStructDecoder"])([
        [
            "discriminator",
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$codecs$2f$node_modules$2f40$solana$2f$codecs$2d$numbers$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getU32Decoder"])()
        ],
        [
            "lamports",
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$codecs$2f$node_modules$2f40$solana$2f$codecs$2d$numbers$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getU64Decoder"])()
        ],
        [
            "space",
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$codecs$2f$node_modules$2f40$solana$2f$codecs$2d$numbers$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getU64Decoder"])()
        ],
        [
            "programAddress",
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$kit$2f$node_modules$2f40$solana$2f$addresses$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getAddressDecoder"])()
        ]
    ]);
}
function getCreateAccountInstructionDataCodec() {
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$codecs$2f$node_modules$2f40$solana$2f$codecs$2d$core$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["combineCodec"])(getCreateAccountInstructionDataEncoder(), getCreateAccountInstructionDataDecoder());
}
function getCreateAccountInstruction(input, config) {
    var _config_programAddress;
    const programAddress = (_config_programAddress = config === null || config === void 0 ? void 0 : config.programAddress) !== null && _config_programAddress !== void 0 ? _config_programAddress : SYSTEM_PROGRAM_ADDRESS;
    var _input_payer, _input_newAccount;
    const originalAccounts = {
        payer: {
            value: (_input_payer = input.payer) !== null && _input_payer !== void 0 ? _input_payer : null,
            isWritable: true
        },
        newAccount: {
            value: (_input_newAccount = input.newAccount) !== null && _input_newAccount !== void 0 ? _input_newAccount : null,
            isWritable: true
        }
    };
    const accounts = originalAccounts;
    const args = {
        ...input
    };
    const byteDelta = [
        Number(args.space) + __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$accounts$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["BASE_ACCOUNT_SIZE"]
    ].reduce((a, b)=>a + b, 0);
    const getAccountMeta = getAccountMetaFactory(programAddress);
    const instruction = {
        accounts: [
            getAccountMeta(accounts.payer),
            getAccountMeta(accounts.newAccount)
        ],
        programAddress,
        data: getCreateAccountInstructionDataEncoder().encode(args)
    };
    return Object.freeze({
        ...instruction,
        byteDelta
    });
}
function parseCreateAccountInstruction(instruction) {
    if (instruction.accounts.length < 2) {
        throw new Error("Not enough accounts");
    }
    let accountIndex = 0;
    const getNextAccount = ()=>{
        const accountMeta = instruction.accounts[accountIndex];
        accountIndex += 1;
        return accountMeta;
    };
    return {
        programAddress: instruction.programAddress,
        accounts: {
            payer: getNextAccount(),
            newAccount: getNextAccount()
        },
        data: getCreateAccountInstructionDataDecoder().decode(instruction.data)
    };
}
var CREATE_ACCOUNT_WITH_SEED_DISCRIMINATOR = 3;
function getCreateAccountWithSeedDiscriminatorBytes() {
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$codecs$2f$node_modules$2f40$solana$2f$codecs$2d$numbers$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getU32Encoder"])().encode(CREATE_ACCOUNT_WITH_SEED_DISCRIMINATOR);
}
function getCreateAccountWithSeedInstructionDataEncoder() {
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$codecs$2f$node_modules$2f40$solana$2f$codecs$2d$core$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["transformEncoder"])((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$codecs$2f$node_modules$2f40$solana$2f$codecs$2d$data$2d$structures$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getStructEncoder"])([
        [
            "discriminator",
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$codecs$2f$node_modules$2f40$solana$2f$codecs$2d$numbers$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getU32Encoder"])()
        ],
        [
            "base",
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$kit$2f$node_modules$2f40$solana$2f$addresses$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getAddressEncoder"])()
        ],
        [
            "seed",
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$codecs$2f$node_modules$2f40$solana$2f$codecs$2d$core$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["addEncoderSizePrefix"])((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$codecs$2f$node_modules$2f40$solana$2f$codecs$2d$strings$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getUtf8Encoder"])(), (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$codecs$2f$node_modules$2f40$solana$2f$codecs$2d$numbers$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getU64Encoder"])())
        ],
        [
            "amount",
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$codecs$2f$node_modules$2f40$solana$2f$codecs$2d$numbers$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getU64Encoder"])()
        ],
        [
            "space",
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$codecs$2f$node_modules$2f40$solana$2f$codecs$2d$numbers$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getU64Encoder"])()
        ],
        [
            "programAddress",
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$kit$2f$node_modules$2f40$solana$2f$addresses$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getAddressEncoder"])()
        ]
    ]), (value)=>({
            ...value,
            discriminator: CREATE_ACCOUNT_WITH_SEED_DISCRIMINATOR
        }));
}
function getCreateAccountWithSeedInstructionDataDecoder() {
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$codecs$2f$node_modules$2f40$solana$2f$codecs$2d$data$2d$structures$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getStructDecoder"])([
        [
            "discriminator",
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$codecs$2f$node_modules$2f40$solana$2f$codecs$2d$numbers$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getU32Decoder"])()
        ],
        [
            "base",
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$kit$2f$node_modules$2f40$solana$2f$addresses$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getAddressDecoder"])()
        ],
        [
            "seed",
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$codecs$2f$node_modules$2f40$solana$2f$codecs$2d$core$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["addDecoderSizePrefix"])((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$codecs$2f$node_modules$2f40$solana$2f$codecs$2d$strings$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getUtf8Decoder"])(), (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$codecs$2f$node_modules$2f40$solana$2f$codecs$2d$numbers$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getU64Decoder"])())
        ],
        [
            "amount",
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$codecs$2f$node_modules$2f40$solana$2f$codecs$2d$numbers$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getU64Decoder"])()
        ],
        [
            "space",
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$codecs$2f$node_modules$2f40$solana$2f$codecs$2d$numbers$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getU64Decoder"])()
        ],
        [
            "programAddress",
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$kit$2f$node_modules$2f40$solana$2f$addresses$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getAddressDecoder"])()
        ]
    ]);
}
function getCreateAccountWithSeedInstructionDataCodec() {
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$codecs$2f$node_modules$2f40$solana$2f$codecs$2d$core$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["combineCodec"])(getCreateAccountWithSeedInstructionDataEncoder(), getCreateAccountWithSeedInstructionDataDecoder());
}
function getCreateAccountWithSeedInstruction(input, config) {
    var _config_programAddress;
    const programAddress = (_config_programAddress = config === null || config === void 0 ? void 0 : config.programAddress) !== null && _config_programAddress !== void 0 ? _config_programAddress : SYSTEM_PROGRAM_ADDRESS;
    var _input_payer, _input_newAccount, _input_baseAccount;
    const originalAccounts = {
        payer: {
            value: (_input_payer = input.payer) !== null && _input_payer !== void 0 ? _input_payer : null,
            isWritable: true
        },
        newAccount: {
            value: (_input_newAccount = input.newAccount) !== null && _input_newAccount !== void 0 ? _input_newAccount : null,
            isWritable: true
        },
        baseAccount: {
            value: (_input_baseAccount = input.baseAccount) !== null && _input_baseAccount !== void 0 ? _input_baseAccount : null,
            isWritable: false
        }
    };
    const accounts = originalAccounts;
    const args = {
        ...input
    };
    const getAccountMeta = getAccountMetaFactory(programAddress);
    const instruction = {
        accounts: [
            getAccountMeta(accounts.payer),
            getAccountMeta(accounts.newAccount),
            getAccountMeta(accounts.baseAccount)
        ],
        programAddress,
        data: getCreateAccountWithSeedInstructionDataEncoder().encode(args)
    };
    return instruction;
}
function parseCreateAccountWithSeedInstruction(instruction) {
    if (instruction.accounts.length < 3) {
        throw new Error("Not enough accounts");
    }
    let accountIndex = 0;
    const getNextAccount = ()=>{
        const accountMeta = instruction.accounts[accountIndex];
        accountIndex += 1;
        return accountMeta;
    };
    return {
        programAddress: instruction.programAddress,
        accounts: {
            payer: getNextAccount(),
            newAccount: getNextAccount(),
            baseAccount: getNextAccount()
        },
        data: getCreateAccountWithSeedInstructionDataDecoder().decode(instruction.data)
    };
}
var INITIALIZE_NONCE_ACCOUNT_DISCRIMINATOR = 6;
function getInitializeNonceAccountDiscriminatorBytes() {
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$codecs$2f$node_modules$2f40$solana$2f$codecs$2d$numbers$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getU32Encoder"])().encode(INITIALIZE_NONCE_ACCOUNT_DISCRIMINATOR);
}
function getInitializeNonceAccountInstructionDataEncoder() {
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$codecs$2f$node_modules$2f40$solana$2f$codecs$2d$core$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["transformEncoder"])((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$codecs$2f$node_modules$2f40$solana$2f$codecs$2d$data$2d$structures$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getStructEncoder"])([
        [
            "discriminator",
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$codecs$2f$node_modules$2f40$solana$2f$codecs$2d$numbers$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getU32Encoder"])()
        ],
        [
            "nonceAuthority",
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$kit$2f$node_modules$2f40$solana$2f$addresses$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getAddressEncoder"])()
        ]
    ]), (value)=>({
            ...value,
            discriminator: INITIALIZE_NONCE_ACCOUNT_DISCRIMINATOR
        }));
}
function getInitializeNonceAccountInstructionDataDecoder() {
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$codecs$2f$node_modules$2f40$solana$2f$codecs$2d$data$2d$structures$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getStructDecoder"])([
        [
            "discriminator",
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$codecs$2f$node_modules$2f40$solana$2f$codecs$2d$numbers$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getU32Decoder"])()
        ],
        [
            "nonceAuthority",
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$kit$2f$node_modules$2f40$solana$2f$addresses$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getAddressDecoder"])()
        ]
    ]);
}
function getInitializeNonceAccountInstructionDataCodec() {
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$codecs$2f$node_modules$2f40$solana$2f$codecs$2d$core$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["combineCodec"])(getInitializeNonceAccountInstructionDataEncoder(), getInitializeNonceAccountInstructionDataDecoder());
}
function getInitializeNonceAccountInstruction(input, config) {
    var _config_programAddress;
    const programAddress = (_config_programAddress = config === null || config === void 0 ? void 0 : config.programAddress) !== null && _config_programAddress !== void 0 ? _config_programAddress : SYSTEM_PROGRAM_ADDRESS;
    var _input_nonceAccount, _input_recentBlockhashesSysvar, _input_rentSysvar;
    const originalAccounts = {
        nonceAccount: {
            value: (_input_nonceAccount = input.nonceAccount) !== null && _input_nonceAccount !== void 0 ? _input_nonceAccount : null,
            isWritable: true
        },
        recentBlockhashesSysvar: {
            value: (_input_recentBlockhashesSysvar = input.recentBlockhashesSysvar) !== null && _input_recentBlockhashesSysvar !== void 0 ? _input_recentBlockhashesSysvar : null,
            isWritable: false
        },
        rentSysvar: {
            value: (_input_rentSysvar = input.rentSysvar) !== null && _input_rentSysvar !== void 0 ? _input_rentSysvar : null,
            isWritable: false
        }
    };
    const accounts = originalAccounts;
    const args = {
        ...input
    };
    if (!accounts.recentBlockhashesSysvar.value) {
        accounts.recentBlockhashesSysvar.value = "SysvarRecentB1ockHashes11111111111111111111";
    }
    if (!accounts.rentSysvar.value) {
        accounts.rentSysvar.value = "SysvarRent111111111111111111111111111111111";
    }
    const getAccountMeta = getAccountMetaFactory(programAddress);
    const instruction = {
        accounts: [
            getAccountMeta(accounts.nonceAccount),
            getAccountMeta(accounts.recentBlockhashesSysvar),
            getAccountMeta(accounts.rentSysvar)
        ],
        programAddress,
        data: getInitializeNonceAccountInstructionDataEncoder().encode(args)
    };
    return instruction;
}
function parseInitializeNonceAccountInstruction(instruction) {
    if (instruction.accounts.length < 3) {
        throw new Error("Not enough accounts");
    }
    let accountIndex = 0;
    const getNextAccount = ()=>{
        const accountMeta = instruction.accounts[accountIndex];
        accountIndex += 1;
        return accountMeta;
    };
    return {
        programAddress: instruction.programAddress,
        accounts: {
            nonceAccount: getNextAccount(),
            recentBlockhashesSysvar: getNextAccount(),
            rentSysvar: getNextAccount()
        },
        data: getInitializeNonceAccountInstructionDataDecoder().decode(instruction.data)
    };
}
var TRANSFER_SOL_DISCRIMINATOR = 2;
function getTransferSolDiscriminatorBytes() {
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$codecs$2f$node_modules$2f40$solana$2f$codecs$2d$numbers$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getU32Encoder"])().encode(TRANSFER_SOL_DISCRIMINATOR);
}
function getTransferSolInstructionDataEncoder() {
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$codecs$2f$node_modules$2f40$solana$2f$codecs$2d$core$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["transformEncoder"])((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$codecs$2f$node_modules$2f40$solana$2f$codecs$2d$data$2d$structures$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getStructEncoder"])([
        [
            "discriminator",
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$codecs$2f$node_modules$2f40$solana$2f$codecs$2d$numbers$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getU32Encoder"])()
        ],
        [
            "amount",
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$codecs$2f$node_modules$2f40$solana$2f$codecs$2d$numbers$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getU64Encoder"])()
        ]
    ]), (value)=>({
            ...value,
            discriminator: TRANSFER_SOL_DISCRIMINATOR
        }));
}
function getTransferSolInstructionDataDecoder() {
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$codecs$2f$node_modules$2f40$solana$2f$codecs$2d$data$2d$structures$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getStructDecoder"])([
        [
            "discriminator",
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$codecs$2f$node_modules$2f40$solana$2f$codecs$2d$numbers$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getU32Decoder"])()
        ],
        [
            "amount",
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$codecs$2f$node_modules$2f40$solana$2f$codecs$2d$numbers$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getU64Decoder"])()
        ]
    ]);
}
function getTransferSolInstructionDataCodec() {
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$codecs$2f$node_modules$2f40$solana$2f$codecs$2d$core$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["combineCodec"])(getTransferSolInstructionDataEncoder(), getTransferSolInstructionDataDecoder());
}
function getTransferSolInstruction(input, config) {
    var _config_programAddress;
    const programAddress = (_config_programAddress = config === null || config === void 0 ? void 0 : config.programAddress) !== null && _config_programAddress !== void 0 ? _config_programAddress : SYSTEM_PROGRAM_ADDRESS;
    var _input_source, _input_destination;
    const originalAccounts = {
        source: {
            value: (_input_source = input.source) !== null && _input_source !== void 0 ? _input_source : null,
            isWritable: true
        },
        destination: {
            value: (_input_destination = input.destination) !== null && _input_destination !== void 0 ? _input_destination : null,
            isWritable: true
        }
    };
    const accounts = originalAccounts;
    const args = {
        ...input
    };
    const getAccountMeta = getAccountMetaFactory(programAddress);
    const instruction = {
        accounts: [
            getAccountMeta(accounts.source),
            getAccountMeta(accounts.destination)
        ],
        programAddress,
        data: getTransferSolInstructionDataEncoder().encode(args)
    };
    return instruction;
}
function parseTransferSolInstruction(instruction) {
    if (instruction.accounts.length < 2) {
        throw new Error("Not enough accounts");
    }
    let accountIndex = 0;
    const getNextAccount = ()=>{
        const accountMeta = instruction.accounts[accountIndex];
        accountIndex += 1;
        return accountMeta;
    };
    return {
        programAddress: instruction.programAddress,
        accounts: {
            source: getNextAccount(),
            destination: getNextAccount()
        },
        data: getTransferSolInstructionDataDecoder().decode(instruction.data)
    };
}
var TRANSFER_SOL_WITH_SEED_DISCRIMINATOR = 11;
function getTransferSolWithSeedDiscriminatorBytes() {
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$codecs$2f$node_modules$2f40$solana$2f$codecs$2d$numbers$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getU32Encoder"])().encode(TRANSFER_SOL_WITH_SEED_DISCRIMINATOR);
}
function getTransferSolWithSeedInstructionDataEncoder() {
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$codecs$2f$node_modules$2f40$solana$2f$codecs$2d$core$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["transformEncoder"])((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$codecs$2f$node_modules$2f40$solana$2f$codecs$2d$data$2d$structures$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getStructEncoder"])([
        [
            "discriminator",
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$codecs$2f$node_modules$2f40$solana$2f$codecs$2d$numbers$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getU32Encoder"])()
        ],
        [
            "amount",
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$codecs$2f$node_modules$2f40$solana$2f$codecs$2d$numbers$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getU64Encoder"])()
        ],
        [
            "fromSeed",
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$codecs$2f$node_modules$2f40$solana$2f$codecs$2d$core$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["addEncoderSizePrefix"])((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$codecs$2f$node_modules$2f40$solana$2f$codecs$2d$strings$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getUtf8Encoder"])(), (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$codecs$2f$node_modules$2f40$solana$2f$codecs$2d$numbers$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getU64Encoder"])())
        ],
        [
            "fromOwner",
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$kit$2f$node_modules$2f40$solana$2f$addresses$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getAddressEncoder"])()
        ]
    ]), (value)=>({
            ...value,
            discriminator: TRANSFER_SOL_WITH_SEED_DISCRIMINATOR
        }));
}
function getTransferSolWithSeedInstructionDataDecoder() {
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$codecs$2f$node_modules$2f40$solana$2f$codecs$2d$data$2d$structures$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getStructDecoder"])([
        [
            "discriminator",
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$codecs$2f$node_modules$2f40$solana$2f$codecs$2d$numbers$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getU32Decoder"])()
        ],
        [
            "amount",
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$codecs$2f$node_modules$2f40$solana$2f$codecs$2d$numbers$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getU64Decoder"])()
        ],
        [
            "fromSeed",
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$codecs$2f$node_modules$2f40$solana$2f$codecs$2d$core$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["addDecoderSizePrefix"])((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$codecs$2f$node_modules$2f40$solana$2f$codecs$2d$strings$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getUtf8Decoder"])(), (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$codecs$2f$node_modules$2f40$solana$2f$codecs$2d$numbers$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getU64Decoder"])())
        ],
        [
            "fromOwner",
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$kit$2f$node_modules$2f40$solana$2f$addresses$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getAddressDecoder"])()
        ]
    ]);
}
function getTransferSolWithSeedInstructionDataCodec() {
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$codecs$2f$node_modules$2f40$solana$2f$codecs$2d$core$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["combineCodec"])(getTransferSolWithSeedInstructionDataEncoder(), getTransferSolWithSeedInstructionDataDecoder());
}
function getTransferSolWithSeedInstruction(input, config) {
    var _config_programAddress;
    const programAddress = (_config_programAddress = config === null || config === void 0 ? void 0 : config.programAddress) !== null && _config_programAddress !== void 0 ? _config_programAddress : SYSTEM_PROGRAM_ADDRESS;
    var _input_source, _input_baseAccount, _input_destination;
    const originalAccounts = {
        source: {
            value: (_input_source = input.source) !== null && _input_source !== void 0 ? _input_source : null,
            isWritable: true
        },
        baseAccount: {
            value: (_input_baseAccount = input.baseAccount) !== null && _input_baseAccount !== void 0 ? _input_baseAccount : null,
            isWritable: false
        },
        destination: {
            value: (_input_destination = input.destination) !== null && _input_destination !== void 0 ? _input_destination : null,
            isWritable: true
        }
    };
    const accounts = originalAccounts;
    const args = {
        ...input
    };
    const getAccountMeta = getAccountMetaFactory(programAddress);
    const instruction = {
        accounts: [
            getAccountMeta(accounts.source),
            getAccountMeta(accounts.baseAccount),
            getAccountMeta(accounts.destination)
        ],
        programAddress,
        data: getTransferSolWithSeedInstructionDataEncoder().encode(args)
    };
    return instruction;
}
function parseTransferSolWithSeedInstruction(instruction) {
    if (instruction.accounts.length < 3) {
        throw new Error("Not enough accounts");
    }
    let accountIndex = 0;
    const getNextAccount = ()=>{
        const accountMeta = instruction.accounts[accountIndex];
        accountIndex += 1;
        return accountMeta;
    };
    return {
        programAddress: instruction.programAddress,
        accounts: {
            source: getNextAccount(),
            baseAccount: getNextAccount(),
            destination: getNextAccount()
        },
        data: getTransferSolWithSeedInstructionDataDecoder().decode(instruction.data)
    };
}
var UPGRADE_NONCE_ACCOUNT_DISCRIMINATOR = 12;
function getUpgradeNonceAccountDiscriminatorBytes() {
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$codecs$2f$node_modules$2f40$solana$2f$codecs$2d$numbers$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getU32Encoder"])().encode(UPGRADE_NONCE_ACCOUNT_DISCRIMINATOR);
}
function getUpgradeNonceAccountInstructionDataEncoder() {
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$codecs$2f$node_modules$2f40$solana$2f$codecs$2d$core$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["transformEncoder"])((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$codecs$2f$node_modules$2f40$solana$2f$codecs$2d$data$2d$structures$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getStructEncoder"])([
        [
            "discriminator",
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$codecs$2f$node_modules$2f40$solana$2f$codecs$2d$numbers$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getU32Encoder"])()
        ]
    ]), (value)=>({
            ...value,
            discriminator: UPGRADE_NONCE_ACCOUNT_DISCRIMINATOR
        }));
}
function getUpgradeNonceAccountInstructionDataDecoder() {
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$codecs$2f$node_modules$2f40$solana$2f$codecs$2d$data$2d$structures$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getStructDecoder"])([
        [
            "discriminator",
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$codecs$2f$node_modules$2f40$solana$2f$codecs$2d$numbers$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getU32Decoder"])()
        ]
    ]);
}
function getUpgradeNonceAccountInstructionDataCodec() {
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$codecs$2f$node_modules$2f40$solana$2f$codecs$2d$core$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["combineCodec"])(getUpgradeNonceAccountInstructionDataEncoder(), getUpgradeNonceAccountInstructionDataDecoder());
}
function getUpgradeNonceAccountInstruction(input, config) {
    var _config_programAddress;
    const programAddress = (_config_programAddress = config === null || config === void 0 ? void 0 : config.programAddress) !== null && _config_programAddress !== void 0 ? _config_programAddress : SYSTEM_PROGRAM_ADDRESS;
    var _input_nonceAccount;
    const originalAccounts = {
        nonceAccount: {
            value: (_input_nonceAccount = input.nonceAccount) !== null && _input_nonceAccount !== void 0 ? _input_nonceAccount : null,
            isWritable: true
        }
    };
    const accounts = originalAccounts;
    const getAccountMeta = getAccountMetaFactory(programAddress);
    const instruction = {
        accounts: [
            getAccountMeta(accounts.nonceAccount)
        ],
        programAddress,
        data: getUpgradeNonceAccountInstructionDataEncoder().encode({})
    };
    return instruction;
}
function parseUpgradeNonceAccountInstruction(instruction) {
    if (instruction.accounts.length < 1) {
        throw new Error("Not enough accounts");
    }
    let accountIndex = 0;
    const getNextAccount = ()=>{
        const accountMeta = instruction.accounts[accountIndex];
        accountIndex += 1;
        return accountMeta;
    };
    return {
        programAddress: instruction.programAddress,
        accounts: {
            nonceAccount: getNextAccount()
        },
        data: getUpgradeNonceAccountInstructionDataDecoder().decode(instruction.data)
    };
}
var WITHDRAW_NONCE_ACCOUNT_DISCRIMINATOR = 5;
function getWithdrawNonceAccountDiscriminatorBytes() {
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$codecs$2f$node_modules$2f40$solana$2f$codecs$2d$numbers$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getU32Encoder"])().encode(WITHDRAW_NONCE_ACCOUNT_DISCRIMINATOR);
}
function getWithdrawNonceAccountInstructionDataEncoder() {
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$codecs$2f$node_modules$2f40$solana$2f$codecs$2d$core$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["transformEncoder"])((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$codecs$2f$node_modules$2f40$solana$2f$codecs$2d$data$2d$structures$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getStructEncoder"])([
        [
            "discriminator",
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$codecs$2f$node_modules$2f40$solana$2f$codecs$2d$numbers$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getU32Encoder"])()
        ],
        [
            "withdrawAmount",
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$codecs$2f$node_modules$2f40$solana$2f$codecs$2d$numbers$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getU64Encoder"])()
        ]
    ]), (value)=>({
            ...value,
            discriminator: WITHDRAW_NONCE_ACCOUNT_DISCRIMINATOR
        }));
}
function getWithdrawNonceAccountInstructionDataDecoder() {
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$codecs$2f$node_modules$2f40$solana$2f$codecs$2d$data$2d$structures$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getStructDecoder"])([
        [
            "discriminator",
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$codecs$2f$node_modules$2f40$solana$2f$codecs$2d$numbers$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getU32Decoder"])()
        ],
        [
            "withdrawAmount",
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$codecs$2f$node_modules$2f40$solana$2f$codecs$2d$numbers$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getU64Decoder"])()
        ]
    ]);
}
function getWithdrawNonceAccountInstructionDataCodec() {
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f40$solana$2f$codecs$2f$node_modules$2f40$solana$2f$codecs$2d$core$2f$dist$2f$index$2e$browser$2e$mjs__$5b$app$2d$client$5d$__$28$ecmascript$29$__["combineCodec"])(getWithdrawNonceAccountInstructionDataEncoder(), getWithdrawNonceAccountInstructionDataDecoder());
}
function getWithdrawNonceAccountInstruction(input, config) {
    var _config_programAddress;
    const programAddress = (_config_programAddress = config === null || config === void 0 ? void 0 : config.programAddress) !== null && _config_programAddress !== void 0 ? _config_programAddress : SYSTEM_PROGRAM_ADDRESS;
    var _input_nonceAccount, _input_recipientAccount, _input_recentBlockhashesSysvar, _input_rentSysvar, _input_nonceAuthority;
    const originalAccounts = {
        nonceAccount: {
            value: (_input_nonceAccount = input.nonceAccount) !== null && _input_nonceAccount !== void 0 ? _input_nonceAccount : null,
            isWritable: true
        },
        recipientAccount: {
            value: (_input_recipientAccount = input.recipientAccount) !== null && _input_recipientAccount !== void 0 ? _input_recipientAccount : null,
            isWritable: true
        },
        recentBlockhashesSysvar: {
            value: (_input_recentBlockhashesSysvar = input.recentBlockhashesSysvar) !== null && _input_recentBlockhashesSysvar !== void 0 ? _input_recentBlockhashesSysvar : null,
            isWritable: false
        },
        rentSysvar: {
            value: (_input_rentSysvar = input.rentSysvar) !== null && _input_rentSysvar !== void 0 ? _input_rentSysvar : null,
            isWritable: false
        },
        nonceAuthority: {
            value: (_input_nonceAuthority = input.nonceAuthority) !== null && _input_nonceAuthority !== void 0 ? _input_nonceAuthority : null,
            isWritable: false
        }
    };
    const accounts = originalAccounts;
    const args = {
        ...input
    };
    if (!accounts.recentBlockhashesSysvar.value) {
        accounts.recentBlockhashesSysvar.value = "SysvarRecentB1ockHashes11111111111111111111";
    }
    if (!accounts.rentSysvar.value) {
        accounts.rentSysvar.value = "SysvarRent111111111111111111111111111111111";
    }
    const getAccountMeta = getAccountMetaFactory(programAddress);
    const instruction = {
        accounts: [
            getAccountMeta(accounts.nonceAccount),
            getAccountMeta(accounts.recipientAccount),
            getAccountMeta(accounts.recentBlockhashesSysvar),
            getAccountMeta(accounts.rentSysvar),
            getAccountMeta(accounts.nonceAuthority)
        ],
        programAddress,
        data: getWithdrawNonceAccountInstructionDataEncoder().encode(args)
    };
    return instruction;
}
function parseWithdrawNonceAccountInstruction(instruction) {
    if (instruction.accounts.length < 5) {
        throw new Error("Not enough accounts");
    }
    let accountIndex = 0;
    const getNextAccount = ()=>{
        const accountMeta = instruction.accounts[accountIndex];
        accountIndex += 1;
        return accountMeta;
    };
    return {
        programAddress: instruction.programAddress,
        accounts: {
            nonceAccount: getNextAccount(),
            recipientAccount: getNextAccount(),
            recentBlockhashesSysvar: getNextAccount(),
            rentSysvar: getNextAccount(),
            nonceAuthority: getNextAccount()
        },
        data: getWithdrawNonceAccountInstructionDataDecoder().decode(instruction.data)
    };
}
;
 //# sourceMappingURL=index.mjs.map
 //# sourceMappingURL=index.mjs.map
}),
}]);

//# sourceMappingURL=node_modules_%40solana-program_86b81dfc._.js.map