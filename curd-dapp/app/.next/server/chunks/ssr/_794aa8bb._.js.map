{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 5, "column": 0}, "map": {"version":3,"sources":["file:///Users/sunqq/Work/solana/qq-solana-dapp/curd-dapp/app/clients/ts/accounts/journalEntry.ts"],"sourcesContent":["/**\n * This code was AUTOGENERATED using the codama library.\n * Please DO NOT EDIT THIS FILE, instead use visitors\n * to add features, then rerun codama to update it.\n *\n * @see https://github.com/codama-idl/codama\n */\n\nimport {\n  addDecoderSizePrefix,\n  addEncoderSizePrefix,\n  assertAccountExists,\n  assertAccountsExist,\n  combineCodec,\n  decodeAccount,\n  fetchEncodedAccount,\n  fetchEncodedAccounts,\n  fixDecoderSize,\n  fixEncoderSize,\n  getAddressDecoder,\n  getAddressEncoder,\n  getBytesDecoder,\n  getBytesEncoder,\n  getStructDecoder,\n  getStructEncoder,\n  getU32Decoder,\n  getU32Encoder,\n  getUtf8Decoder,\n  getUtf8Encoder,\n  transformEncoder,\n  type Account,\n  type Address,\n  type Codec,\n  type Decoder,\n  type EncodedAccount,\n  type Encoder,\n  type FetchAccountConfig,\n  type FetchAccountsConfig,\n  type MaybeAccount,\n  type MaybeEncodedAccount,\n  type ReadonlyUint8Array,\n} from '@solana/kit';\n\nexport const JOURNAL_ENTRY_DISCRIMINATOR = new Uint8Array([\n  255, 74, 177, 178, 227, 112, 46, 152,\n]);\n\nexport function getJournalEntryDiscriminatorBytes() {\n  return fixEncoderSize(getBytesEncoder(), 8).encode(\n    JOURNAL_ENTRY_DISCRIMINATOR\n  );\n}\n\nexport type JournalEntry = {\n  discriminator: ReadonlyUint8Array;\n  owner: Address;\n  title: string;\n  content: string;\n};\n\nexport type JournalEntryArgs = {\n  owner: Address;\n  title: string;\n  content: string;\n};\n\nexport function getJournalEntryEncoder(): Encoder<JournalEntryArgs> {\n  return transformEncoder(\n    getStructEncoder([\n      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],\n      ['owner', getAddressEncoder()],\n      ['title', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],\n      ['content', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],\n    ]),\n    (value) => ({ ...value, discriminator: JOURNAL_ENTRY_DISCRIMINATOR })\n  );\n}\n\nexport function getJournalEntryDecoder(): Decoder<JournalEntry> {\n  return getStructDecoder([\n    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],\n    ['owner', getAddressDecoder()],\n    ['title', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],\n    ['content', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],\n  ]);\n}\n\nexport function getJournalEntryCodec(): Codec<JournalEntryArgs, JournalEntry> {\n  return combineCodec(getJournalEntryEncoder(), getJournalEntryDecoder());\n}\n\nexport function decodeJournalEntry<TAddress extends string = string>(\n  encodedAccount: EncodedAccount<TAddress>\n): Account<JournalEntry, TAddress>;\nexport function decodeJournalEntry<TAddress extends string = string>(\n  encodedAccount: MaybeEncodedAccount<TAddress>\n): MaybeAccount<JournalEntry, TAddress>;\nexport function decodeJournalEntry<TAddress extends string = string>(\n  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>\n): Account<JournalEntry, TAddress> | MaybeAccount<JournalEntry, TAddress> {\n  return decodeAccount(\n    encodedAccount as MaybeEncodedAccount<TAddress>,\n    getJournalEntryDecoder()\n  );\n}\n\nexport async function fetchJournalEntry<TAddress extends string = string>(\n  rpc: Parameters<typeof fetchEncodedAccount>[0],\n  address: Address<TAddress>,\n  config?: FetchAccountConfig\n): Promise<Account<JournalEntry, TAddress>> {\n  const maybeAccount = await fetchMaybeJournalEntry(rpc, address, config);\n  assertAccountExists(maybeAccount);\n  return maybeAccount;\n}\n\nexport async function fetchMaybeJournalEntry<TAddress extends string = string>(\n  rpc: Parameters<typeof fetchEncodedAccount>[0],\n  address: Address<TAddress>,\n  config?: FetchAccountConfig\n): Promise<MaybeAccount<JournalEntry, TAddress>> {\n  const maybeAccount = await fetchEncodedAccount(rpc, address, config);\n  return decodeJournalEntry(maybeAccount);\n}\n\nexport async function fetchAllJournalEntry(\n  rpc: Parameters<typeof fetchEncodedAccounts>[0],\n  addresses: Array<Address>,\n  config?: FetchAccountsConfig\n): Promise<Account<JournalEntry>[]> {\n  const maybeAccounts = await fetchAllMaybeJournalEntry(rpc, addresses, config);\n  assertAccountsExist(maybeAccounts);\n  return maybeAccounts;\n}\n\nexport async function fetchAllMaybeJournalEntry(\n  rpc: Parameters<typeof fetchEncodedAccounts>[0],\n  addresses: Array<Address>,\n  config?: FetchAccountsConfig\n): Promise<MaybeAccount<JournalEntry>[]> {\n  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);\n  return maybeAccounts.map((maybeAccount) => decodeJournalEntry(maybeAccount));\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 114, "column": 0}, "map": {"version":3,"sources":["file:///Users/sunqq/Work/solana/qq-solana-dapp/curd-dapp/app/clients/ts/accounts/index.ts"],"sourcesContent":["/**\n * This code was AUTOGENERATED using the codama library.\n * Please DO NOT EDIT THIS FILE, instead use visitors\n * to add features, then rerun codama to update it.\n *\n * @see https://github.com/codama-idl/codama\n */\n\nexport * from './journalEntry';\n"],"names":[],"mappings":"AAAA;;;;;;CAMC;AAED","debugId":null}},
    {"offset": {"line": 134, "column": 0}, "map": {"version":3,"sources":["file:///Users/sunqq/Work/solana/qq-solana-dapp/curd-dapp/app/clients/ts/programs/curdDapp.ts"],"sourcesContent":["/**\n * This code was AUTOGENERATED using the codama library.\n * Please DO NOT EDIT THIS FILE, instead use visitors\n * to add features, then rerun codama to update it.\n *\n * @see https://github.com/codama-idl/codama\n */\n\nimport {\n  containsBytes,\n  fixEncoderSize,\n  getBytesEncoder,\n  type Address,\n  type ReadonlyUint8Array,\n} from '@solana/kit';\nimport {\n  type ParsedCreateJournalEntryInstruction,\n  type ParsedDeleteJournalEntryInstruction,\n  type ParsedUpdateJournalEntryInstruction,\n} from '../instructions';\n\nexport const CURD_DAPP_PROGRAM_ADDRESS =\n  'EQ84rMPQR8HQQ5QfHKyLnRUGF3XAaUMHtWmhv1ZzSEaE' as Address<'EQ84rMPQR8HQQ5QfHKyLnRUGF3XAaUMHtWmhv1ZzSEaE'>;\n\nexport enum CurdDappAccount {\n  JournalEntry,\n}\n\nexport function identifyCurdDappAccount(\n  account: { data: ReadonlyUint8Array } | ReadonlyUint8Array\n): CurdDappAccount {\n  const data = 'data' in account ? account.data : account;\n  if (\n    containsBytes(\n      data,\n      fixEncoderSize(getBytesEncoder(), 8).encode(\n        new Uint8Array([255, 74, 177, 178, 227, 112, 46, 152])\n      ),\n      0\n    )\n  ) {\n    return CurdDappAccount.JournalEntry;\n  }\n  throw new Error(\n    'The provided account could not be identified as a curdDapp account.'\n  );\n}\n\nexport enum CurdDappInstruction {\n  CreateJournalEntry,\n  DeleteJournalEntry,\n  UpdateJournalEntry,\n}\n\nexport function identifyCurdDappInstruction(\n  instruction: { data: ReadonlyUint8Array } | ReadonlyUint8Array\n): CurdDappInstruction {\n  const data = 'data' in instruction ? instruction.data : instruction;\n  if (\n    containsBytes(\n      data,\n      fixEncoderSize(getBytesEncoder(), 8).encode(\n        new Uint8Array([48, 65, 201, 186, 25, 41, 127, 0])\n      ),\n      0\n    )\n  ) {\n    return CurdDappInstruction.CreateJournalEntry;\n  }\n  if (\n    containsBytes(\n      data,\n      fixEncoderSize(getBytesEncoder(), 8).encode(\n        new Uint8Array([156, 50, 93, 5, 157, 97, 188, 114])\n      ),\n      0\n    )\n  ) {\n    return CurdDappInstruction.DeleteJournalEntry;\n  }\n  if (\n    containsBytes(\n      data,\n      fixEncoderSize(getBytesEncoder(), 8).encode(\n        new Uint8Array([113, 164, 49, 62, 43, 83, 194, 172])\n      ),\n      0\n    )\n  ) {\n    return CurdDappInstruction.UpdateJournalEntry;\n  }\n  throw new Error(\n    'The provided instruction could not be identified as a curdDapp instruction.'\n  );\n}\n\nexport type ParsedCurdDappInstruction<\n  TProgram extends string = 'EQ84rMPQR8HQQ5QfHKyLnRUGF3XAaUMHtWmhv1ZzSEaE',\n> =\n  | ({\n      instructionType: CurdDappInstruction.CreateJournalEntry;\n    } & ParsedCreateJournalEntryInstruction<TProgram>)\n  | ({\n      instructionType: CurdDappInstruction.DeleteJournalEntry;\n    } & ParsedDeleteJournalEntryInstruction<TProgram>)\n  | ({\n      instructionType: CurdDappInstruction.UpdateJournalEntry;\n    } & ParsedUpdateJournalEntryInstruction<TProgram>);\n"],"names":[],"mappings":"AAAA;;;;;;CAMC;;;;;;;AAED;AAAA;;AAaO,MAAM,4BACX;AAEK,IAAA,AAAK,yCAAA;;WAAA;;AAIL,SAAS,wBACd,OAA0D;IAE1D,MAAM,OAAO,UAAU,UAAU,QAAQ,IAAI,GAAG;IAChD,IACE,CAAA,GAAA,0MAAA,CAAA,gBAAa,AAAD,EACV,MACA,CAAA,GAAA,0MAAA,CAAA,iBAAc,AAAD,EAAE,CAAA,GAAA,wNAAA,CAAA,kBAAe,AAAD,KAAK,GAAG,MAAM,CACzC,IAAI,WAAW;QAAC;QAAK;QAAI;QAAK;QAAK;QAAK;QAAK;QAAI;KAAI,IAEvD,IAEF;QACA;IACF;IACA,MAAM,IAAI,MACR;AAEJ;AAEO,IAAA,AAAK,6CAAA;;;;WAAA;;AAML,SAAS,4BACd,WAA8D;IAE9D,MAAM,OAAO,UAAU,cAAc,YAAY,IAAI,GAAG;IACxD,IACE,CAAA,GAAA,0MAAA,CAAA,gBAAa,AAAD,EACV,MACA,CAAA,GAAA,0MAAA,CAAA,iBAAc,AAAD,EAAE,CAAA,GAAA,wNAAA,CAAA,kBAAe,AAAD,KAAK,GAAG,MAAM,CACzC,IAAI,WAAW;QAAC;QAAI;QAAI;QAAK;QAAK;QAAI;QAAI;QAAK;KAAE,IAEnD,IAEF;QACA;IACF;IACA,IACE,CAAA,GAAA,0MAAA,CAAA,gBAAa,AAAD,EACV,MACA,CAAA,GAAA,0MAAA,CAAA,iBAAc,AAAD,EAAE,CAAA,GAAA,wNAAA,CAAA,kBAAe,AAAD,KAAK,GAAG,MAAM,CACzC,IAAI,WAAW;QAAC;QAAK;QAAI;QAAI;QAAG;QAAK;QAAI;QAAK;KAAI,IAEpD,IAEF;QACA;IACF;IACA,IACE,CAAA,GAAA,0MAAA,CAAA,gBAAa,AAAD,EACV,MACA,CAAA,GAAA,0MAAA,CAAA,iBAAc,AAAD,EAAE,CAAA,GAAA,wNAAA,CAAA,kBAAe,AAAD,KAAK,GAAG,MAAM,CACzC,IAAI,WAAW;QAAC;QAAK;QAAK;QAAI;QAAI;QAAI;QAAI;QAAK;KAAI,IAErD,IAEF;QACA;IACF;IACA,MAAM,IAAI,MACR;AAEJ","debugId":null}},
    {"offset": {"line": 221, "column": 0}, "map": {"version":3,"sources":["file:///Users/sunqq/Work/solana/qq-solana-dapp/curd-dapp/app/clients/ts/programs/index.ts"],"sourcesContent":["/**\n * This code was AUTOGENERATED using the codama library.\n * Please DO NOT EDIT THIS FILE, instead use visitors\n * to add features, then rerun codama to update it.\n *\n * @see https://github.com/codama-idl/codama\n */\n\nexport * from './curdDapp';\n"],"names":[],"mappings":"AAAA;;;;;;CAMC;AAED","debugId":null}},
    {"offset": {"line": 241, "column": 0}, "map": {"version":3,"sources":["file:///Users/sunqq/Work/solana/qq-solana-dapp/curd-dapp/app/clients/ts/shared/index.ts"],"sourcesContent":["/**\n * This code was AUTOGENERATED using the codama library.\n * Please DO NOT EDIT THIS FILE, instead use visitors\n * to add features, then rerun codama to update it.\n *\n * @see https://github.com/codama-idl/codama\n */\n\nimport {\n  AccountRole,\n  isProgramDerivedAddress,\n  isTransactionSigner as kitIsTransactionSigner,\n  type AccountMeta,\n  type AccountSignerMeta,\n  type Address,\n  type ProgramDerivedAddress,\n  type TransactionSigner,\n  upgradeRoleToSigner,\n} from '@solana/kit';\n\n/**\n * Asserts that the given value is not null or undefined.\n * @internal\n */\nexport function expectSome<T>(value: T | null | undefined): T {\n  if (value == null) {\n    throw new Error('Expected a value but received null or undefined.');\n  }\n  return value;\n}\n\n/**\n * Asserts that the given value is a PublicKey.\n * @internal\n */\nexport function expectAddress<T extends string = string>(\n  value:\n    | Address<T>\n    | ProgramDerivedAddress<T>\n    | TransactionSigner<T>\n    | null\n    | undefined\n): Address<T> {\n  if (!value) {\n    throw new Error('Expected a Address.');\n  }\n  if (typeof value === 'object' && 'address' in value) {\n    return value.address;\n  }\n  if (Array.isArray(value)) {\n    return value[0];\n  }\n  return value as Address<T>;\n}\n\n/**\n * Asserts that the given value is a PDA.\n * @internal\n */\nexport function expectProgramDerivedAddress<T extends string = string>(\n  value:\n    | Address<T>\n    | ProgramDerivedAddress<T>\n    | TransactionSigner<T>\n    | null\n    | undefined\n): ProgramDerivedAddress<T> {\n  if (!value || !Array.isArray(value) || !isProgramDerivedAddress(value)) {\n    throw new Error('Expected a ProgramDerivedAddress.');\n  }\n  return value;\n}\n\n/**\n * Asserts that the given value is a TransactionSigner.\n * @internal\n */\nexport function expectTransactionSigner<T extends string = string>(\n  value:\n    | Address<T>\n    | ProgramDerivedAddress<T>\n    | TransactionSigner<T>\n    | null\n    | undefined\n): TransactionSigner<T> {\n  if (!value || !isTransactionSigner(value)) {\n    throw new Error('Expected a TransactionSigner.');\n  }\n  return value;\n}\n\n/**\n * Defines an instruction account to resolve.\n * @internal\n */\nexport type ResolvedAccount<\n  T extends string = string,\n  U extends\n    | Address<T>\n    | ProgramDerivedAddress<T>\n    | TransactionSigner<T>\n    | null =\n    | Address<T>\n    | ProgramDerivedAddress<T>\n    | TransactionSigner<T>\n    | null,\n> = {\n  isWritable: boolean;\n  value: U;\n};\n\n/**\n * Defines an instruction that stores additional bytes on-chain.\n * @internal\n */\nexport type InstructionWithByteDelta = {\n  byteDelta: number;\n};\n\n/**\n * Get account metas and signers from resolved accounts.\n * @internal\n */\nexport function getAccountMetaFactory(\n  programAddress: Address,\n  optionalAccountStrategy: 'omitted' | 'programId'\n) {\n  return (\n    account: ResolvedAccount\n  ): AccountMeta | AccountSignerMeta | undefined => {\n    if (!account.value) {\n      if (optionalAccountStrategy === 'omitted') return;\n      return Object.freeze({\n        address: programAddress,\n        role: AccountRole.READONLY,\n      });\n    }\n\n    const writableRole = account.isWritable\n      ? AccountRole.WRITABLE\n      : AccountRole.READONLY;\n    return Object.freeze({\n      address: expectAddress(account.value),\n      role: isTransactionSigner(account.value)\n        ? upgradeRoleToSigner(writableRole)\n        : writableRole,\n      ...(isTransactionSigner(account.value) ? { signer: account.value } : {}),\n    });\n  };\n}\n\nexport function isTransactionSigner<TAddress extends string = string>(\n  value:\n    | Address<TAddress>\n    | ProgramDerivedAddress<TAddress>\n    | TransactionSigner<TAddress>\n): value is TransactionSigner<TAddress> {\n  return (\n    !!value &&\n    typeof value === 'object' &&\n    'address' in value &&\n    kitIsTransactionSigner(value)\n  );\n}\n"],"names":[],"mappings":"AAAA;;;;;;CAMC;;;;;;;;AAED;AAAA;AAAA;;AAgBO,SAAS,WAAc,KAA2B;IACvD,IAAI,SAAS,MAAM;QACjB,MAAM,IAAI,MAAM;IAClB;IACA,OAAO;AACT;AAMO,SAAS,cACd,KAKa;IAEb,IAAI,CAAC,OAAO;QACV,MAAM,IAAI,MAAM;IAClB;IACA,IAAI,OAAO,UAAU,YAAY,aAAa,OAAO;QACnD,OAAO,MAAM,OAAO;IACtB;IACA,IAAI,MAAM,OAAO,CAAC,QAAQ;QACxB,OAAO,KAAK,CAAC,EAAE;IACjB;IACA,OAAO;AACT;AAMO,SAAS,4BACd,KAKa;IAEb,IAAI,CAAC,SAAS,CAAC,MAAM,OAAO,CAAC,UAAU,CAAC,CAAA,GAAA,kMAAA,CAAA,0BAAuB,AAAD,EAAE,QAAQ;QACtE,MAAM,IAAI,MAAM;IAClB;IACA,OAAO;AACT;AAMO,SAAS,wBACd,KAKa;IAEb,IAAI,CAAC,SAAS,CAAC,oBAAoB,QAAQ;QACzC,MAAM,IAAI,MAAM;IAClB;IACA,OAAO;AACT;AAkCO,SAAS,sBACd,cAAuB,EACvB,uBAAgD;IAEhD,OAAO,CACL;QAEA,IAAI,CAAC,QAAQ,KAAK,EAAE;YAClB,IAAI,4BAA4B,WAAW;YAC3C,OAAO,OAAO,MAAM,CAAC;gBACnB,SAAS;gBACT,MAAM,qMAAA,CAAA,cAAW,CAAC,QAAQ;YAC5B;QACF;QAEA,MAAM,eAAe,QAAQ,UAAU,GACnC,qMAAA,CAAA,cAAW,CAAC,QAAQ,GACpB,qMAAA,CAAA,cAAW,CAAC,QAAQ;QACxB,OAAO,OAAO,MAAM,CAAC;YACnB,SAAS,cAAc,QAAQ,KAAK;YACpC,MAAM,oBAAoB,QAAQ,KAAK,IACnC,CAAA,GAAA,qMAAA,CAAA,sBAAmB,AAAD,EAAE,gBACpB;YACJ,GAAI,oBAAoB,QAAQ,KAAK,IAAI;gBAAE,QAAQ,QAAQ,KAAK;YAAC,IAAI,CAAC,CAAC;QACzE;IACF;AACF;AAEO,SAAS,oBACd,KAG+B;IAE/B,OACE,CAAC,CAAC,SACF,OAAO,UAAU,YACjB,aAAa,SACb,CAAA,GAAA,gMAAA,CAAA,sBAAsB,AAAD,EAAE;AAE3B","debugId":null}},
    {"offset": {"line": 315, "column": 0}, "map": {"version":3,"sources":["file:///Users/sunqq/Work/solana/qq-solana-dapp/curd-dapp/app/clients/ts/instructions/createJournalEntry.ts"],"sourcesContent":["/**\n * This code was AUTOGENERATED using the codama library.\n * Please DO NOT EDIT THIS FILE, instead use visitors\n * to add features, then rerun codama to update it.\n *\n * @see https://github.com/codama-idl/codama\n */\n\nimport {\n  addDecoderSizePrefix,\n  addEncoderSizePrefix,\n  combineCodec,\n  fixDecoderSize,\n  fixEncoderSize,\n  getAddressEncoder,\n  getBytesDecoder,\n  getBytesEncoder,\n  getProgramDerivedAddress,\n  getStructDecoder,\n  getStructEncoder,\n  getU32Decoder,\n  getU32Encoder,\n  getUtf8Decoder,\n  getUtf8Encoder,\n  transformEncoder,\n  type AccountMeta,\n  type AccountSignerMeta,\n  type Address,\n  type Codec,\n  type Decoder,\n  type Encoder,\n  type Instruction,\n  type InstructionWithAccounts,\n  type InstructionWithData,\n  type ReadonlyAccount,\n  type ReadonlyUint8Array,\n  type TransactionSigner,\n  type WritableAccount,\n  type WritableSignerAccount,\n} from '@solana/kit';\nimport { CURD_DAPP_PROGRAM_ADDRESS } from '../programs';\nimport {\n  expectAddress,\n  expectSome,\n  getAccountMetaFactory,\n  type ResolvedAccount,\n} from '../shared';\n\nexport const CREATE_JOURNAL_ENTRY_DISCRIMINATOR = new Uint8Array([\n  48, 65, 201, 186, 25, 41, 127, 0,\n]);\n\nexport function getCreateJournalEntryDiscriminatorBytes() {\n  return fixEncoderSize(getBytesEncoder(), 8).encode(\n    CREATE_JOURNAL_ENTRY_DISCRIMINATOR\n  );\n}\n\nexport type CreateJournalEntryInstruction<\n  TProgram extends string = typeof CURD_DAPP_PROGRAM_ADDRESS,\n  TAccountJournalEntry extends string | AccountMeta<string> = string,\n  TAccountSigner extends string | AccountMeta<string> = string,\n  TAccountSystemProgram extends\n    | string\n    | AccountMeta<string> = '11111111111111111111111111111111',\n  TRemainingAccounts extends readonly AccountMeta<string>[] = [],\n> = Instruction<TProgram> &\n  InstructionWithData<ReadonlyUint8Array> &\n  InstructionWithAccounts<\n    [\n      TAccountJournalEntry extends string\n        ? WritableAccount<TAccountJournalEntry>\n        : TAccountJournalEntry,\n      TAccountSigner extends string\n        ? WritableSignerAccount<TAccountSigner> &\n            AccountSignerMeta<TAccountSigner>\n        : TAccountSigner,\n      TAccountSystemProgram extends string\n        ? ReadonlyAccount<TAccountSystemProgram>\n        : TAccountSystemProgram,\n      ...TRemainingAccounts,\n    ]\n  >;\n\nexport type CreateJournalEntryInstructionData = {\n  discriminator: ReadonlyUint8Array;\n  title: string;\n  content: string;\n};\n\nexport type CreateJournalEntryInstructionDataArgs = {\n  title: string;\n  content: string;\n};\n\nexport function getCreateJournalEntryInstructionDataEncoder(): Encoder<CreateJournalEntryInstructionDataArgs> {\n  return transformEncoder(\n    getStructEncoder([\n      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],\n      ['title', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],\n      ['content', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],\n    ]),\n    (value) => ({ ...value, discriminator: CREATE_JOURNAL_ENTRY_DISCRIMINATOR })\n  );\n}\n\nexport function getCreateJournalEntryInstructionDataDecoder(): Decoder<CreateJournalEntryInstructionData> {\n  return getStructDecoder([\n    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],\n    ['title', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],\n    ['content', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],\n  ]);\n}\n\nexport function getCreateJournalEntryInstructionDataCodec(): Codec<\n  CreateJournalEntryInstructionDataArgs,\n  CreateJournalEntryInstructionData\n> {\n  return combineCodec(\n    getCreateJournalEntryInstructionDataEncoder(),\n    getCreateJournalEntryInstructionDataDecoder()\n  );\n}\n\nexport type CreateJournalEntryAsyncInput<\n  TAccountJournalEntry extends string = string,\n  TAccountSigner extends string = string,\n  TAccountSystemProgram extends string = string,\n> = {\n  journalEntry?: Address<TAccountJournalEntry>;\n  signer: TransactionSigner<TAccountSigner>;\n  systemProgram?: Address<TAccountSystemProgram>;\n  title: CreateJournalEntryInstructionDataArgs['title'];\n  content: CreateJournalEntryInstructionDataArgs['content'];\n};\n\nexport async function getCreateJournalEntryInstructionAsync<\n  TAccountJournalEntry extends string,\n  TAccountSigner extends string,\n  TAccountSystemProgram extends string,\n  TProgramAddress extends Address = typeof CURD_DAPP_PROGRAM_ADDRESS,\n>(\n  input: CreateJournalEntryAsyncInput<\n    TAccountJournalEntry,\n    TAccountSigner,\n    TAccountSystemProgram\n  >,\n  config?: { programAddress?: TProgramAddress }\n): Promise<\n  CreateJournalEntryInstruction<\n    TProgramAddress,\n    TAccountJournalEntry,\n    TAccountSigner,\n    TAccountSystemProgram\n  >\n> {\n  // Program address.\n  const programAddress = config?.programAddress ?? CURD_DAPP_PROGRAM_ADDRESS;\n\n  // Original accounts.\n  const originalAccounts = {\n    journalEntry: { value: input.journalEntry ?? null, isWritable: true },\n    signer: { value: input.signer ?? null, isWritable: true },\n    systemProgram: { value: input.systemProgram ?? null, isWritable: false },\n  };\n  const accounts = originalAccounts as Record<\n    keyof typeof originalAccounts,\n    ResolvedAccount\n  >;\n\n  // Original args.\n  const args = { ...input };\n\n  // Resolve default values.\n  if (!accounts.journalEntry.value) {\n    accounts.journalEntry.value = await getProgramDerivedAddress({\n      programAddress,\n      seeds: [\n        addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder()).encode(\n          expectSome(args.title)\n        ),\n        getAddressEncoder().encode(expectAddress(accounts.signer.value)),\n      ],\n    });\n  }\n  if (!accounts.systemProgram.value) {\n    accounts.systemProgram.value =\n      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;\n  }\n\n  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');\n  const instruction = {\n    accounts: [\n      getAccountMeta(accounts.journalEntry),\n      getAccountMeta(accounts.signer),\n      getAccountMeta(accounts.systemProgram),\n    ],\n    programAddress,\n    data: getCreateJournalEntryInstructionDataEncoder().encode(\n      args as CreateJournalEntryInstructionDataArgs\n    ),\n  } as CreateJournalEntryInstruction<\n    TProgramAddress,\n    TAccountJournalEntry,\n    TAccountSigner,\n    TAccountSystemProgram\n  >;\n\n  return instruction;\n}\n\nexport type CreateJournalEntryInput<\n  TAccountJournalEntry extends string = string,\n  TAccountSigner extends string = string,\n  TAccountSystemProgram extends string = string,\n> = {\n  journalEntry: Address<TAccountJournalEntry>;\n  signer: TransactionSigner<TAccountSigner>;\n  systemProgram?: Address<TAccountSystemProgram>;\n  title: CreateJournalEntryInstructionDataArgs['title'];\n  content: CreateJournalEntryInstructionDataArgs['content'];\n};\n\nexport function getCreateJournalEntryInstruction<\n  TAccountJournalEntry extends string,\n  TAccountSigner extends string,\n  TAccountSystemProgram extends string,\n  TProgramAddress extends Address = typeof CURD_DAPP_PROGRAM_ADDRESS,\n>(\n  input: CreateJournalEntryInput<\n    TAccountJournalEntry,\n    TAccountSigner,\n    TAccountSystemProgram\n  >,\n  config?: { programAddress?: TProgramAddress }\n): CreateJournalEntryInstruction<\n  TProgramAddress,\n  TAccountJournalEntry,\n  TAccountSigner,\n  TAccountSystemProgram\n> {\n  // Program address.\n  const programAddress = config?.programAddress ?? CURD_DAPP_PROGRAM_ADDRESS;\n\n  // Original accounts.\n  const originalAccounts = {\n    journalEntry: { value: input.journalEntry ?? null, isWritable: true },\n    signer: { value: input.signer ?? null, isWritable: true },\n    systemProgram: { value: input.systemProgram ?? null, isWritable: false },\n  };\n  const accounts = originalAccounts as Record<\n    keyof typeof originalAccounts,\n    ResolvedAccount\n  >;\n\n  // Original args.\n  const args = { ...input };\n\n  // Resolve default values.\n  if (!accounts.systemProgram.value) {\n    accounts.systemProgram.value =\n      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;\n  }\n\n  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');\n  const instruction = {\n    accounts: [\n      getAccountMeta(accounts.journalEntry),\n      getAccountMeta(accounts.signer),\n      getAccountMeta(accounts.systemProgram),\n    ],\n    programAddress,\n    data: getCreateJournalEntryInstructionDataEncoder().encode(\n      args as CreateJournalEntryInstructionDataArgs\n    ),\n  } as CreateJournalEntryInstruction<\n    TProgramAddress,\n    TAccountJournalEntry,\n    TAccountSigner,\n    TAccountSystemProgram\n  >;\n\n  return instruction;\n}\n\nexport type ParsedCreateJournalEntryInstruction<\n  TProgram extends string = typeof CURD_DAPP_PROGRAM_ADDRESS,\n  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],\n> = {\n  programAddress: Address<TProgram>;\n  accounts: {\n    journalEntry: TAccountMetas[0];\n    signer: TAccountMetas[1];\n    systemProgram: TAccountMetas[2];\n  };\n  data: CreateJournalEntryInstructionData;\n};\n\nexport function parseCreateJournalEntryInstruction<\n  TProgram extends string,\n  TAccountMetas extends readonly AccountMeta[],\n>(\n  instruction: Instruction<TProgram> &\n    InstructionWithAccounts<TAccountMetas> &\n    InstructionWithData<ReadonlyUint8Array>\n): ParsedCreateJournalEntryInstruction<TProgram, TAccountMetas> {\n  if (instruction.accounts.length < 3) {\n    // TODO: Coded error.\n    throw new Error('Not enough accounts');\n  }\n  let accountIndex = 0;\n  const getNextAccount = () => {\n    const accountMeta = instruction.accounts![accountIndex]!;\n    accountIndex += 1;\n    return accountMeta;\n  };\n  return {\n    programAddress: instruction.programAddress,\n    accounts: {\n      journalEntry: getNextAccount(),\n      signer: getNextAccount(),\n      systemProgram: getNextAccount(),\n    },\n    data: getCreateJournalEntryInstructionDataDecoder().decode(\n      instruction.data\n    ),\n  };\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 505, "column": 0}, "map": {"version":3,"sources":["file:///Users/sunqq/Work/solana/qq-solana-dapp/curd-dapp/app/clients/ts/instructions/deleteJournalEntry.ts"],"sourcesContent":["/**\n * This code was AUTOGENERATED using the codama library.\n * Please DO NOT EDIT THIS FILE, instead use visitors\n * to add features, then rerun codama to update it.\n *\n * @see https://github.com/codama-idl/codama\n */\n\nimport {\n  addDecoderSizePrefix,\n  addEncoderSizePrefix,\n  combineCodec,\n  fixDecoderSize,\n  fixEncoderSize,\n  getAddressEncoder,\n  getBytesDecoder,\n  getBytesEncoder,\n  getProgramDerivedAddress,\n  getStructDecoder,\n  getStructEncoder,\n  getU32Decoder,\n  getU32Encoder,\n  getUtf8Decoder,\n  getUtf8Encoder,\n  transformEncoder,\n  type AccountMeta,\n  type AccountSignerMeta,\n  type Address,\n  type Codec,\n  type Decoder,\n  type Encoder,\n  type Instruction,\n  type InstructionWithAccounts,\n  type InstructionWithData,\n  type ReadonlyAccount,\n  type ReadonlyUint8Array,\n  type TransactionSigner,\n  type WritableAccount,\n  type WritableSignerAccount,\n} from '@solana/kit';\nimport { CURD_DAPP_PROGRAM_ADDRESS } from '../programs';\nimport {\n  expectAddress,\n  expectSome,\n  getAccountMetaFactory,\n  type ResolvedAccount,\n} from '../shared';\n\nexport const DELETE_JOURNAL_ENTRY_DISCRIMINATOR = new Uint8Array([\n  156, 50, 93, 5, 157, 97, 188, 114,\n]);\n\nexport function getDeleteJournalEntryDiscriminatorBytes() {\n  return fixEncoderSize(getBytesEncoder(), 8).encode(\n    DELETE_JOURNAL_ENTRY_DISCRIMINATOR\n  );\n}\n\nexport type DeleteJournalEntryInstruction<\n  TProgram extends string = typeof CURD_DAPP_PROGRAM_ADDRESS,\n  TAccountJournalEntry extends string | AccountMeta<string> = string,\n  TAccountSigner extends string | AccountMeta<string> = string,\n  TAccountSystemProgram extends\n    | string\n    | AccountMeta<string> = '11111111111111111111111111111111',\n  TRemainingAccounts extends readonly AccountMeta<string>[] = [],\n> = Instruction<TProgram> &\n  InstructionWithData<ReadonlyUint8Array> &\n  InstructionWithAccounts<\n    [\n      TAccountJournalEntry extends string\n        ? WritableAccount<TAccountJournalEntry>\n        : TAccountJournalEntry,\n      TAccountSigner extends string\n        ? WritableSignerAccount<TAccountSigner> &\n            AccountSignerMeta<TAccountSigner>\n        : TAccountSigner,\n      TAccountSystemProgram extends string\n        ? ReadonlyAccount<TAccountSystemProgram>\n        : TAccountSystemProgram,\n      ...TRemainingAccounts,\n    ]\n  >;\n\nexport type DeleteJournalEntryInstructionData = {\n  discriminator: ReadonlyUint8Array;\n  title: string;\n};\n\nexport type DeleteJournalEntryInstructionDataArgs = { title: string };\n\nexport function getDeleteJournalEntryInstructionDataEncoder(): Encoder<DeleteJournalEntryInstructionDataArgs> {\n  return transformEncoder(\n    getStructEncoder([\n      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],\n      ['title', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],\n    ]),\n    (value) => ({ ...value, discriminator: DELETE_JOURNAL_ENTRY_DISCRIMINATOR })\n  );\n}\n\nexport function getDeleteJournalEntryInstructionDataDecoder(): Decoder<DeleteJournalEntryInstructionData> {\n  return getStructDecoder([\n    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],\n    ['title', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],\n  ]);\n}\n\nexport function getDeleteJournalEntryInstructionDataCodec(): Codec<\n  DeleteJournalEntryInstructionDataArgs,\n  DeleteJournalEntryInstructionData\n> {\n  return combineCodec(\n    getDeleteJournalEntryInstructionDataEncoder(),\n    getDeleteJournalEntryInstructionDataDecoder()\n  );\n}\n\nexport type DeleteJournalEntryAsyncInput<\n  TAccountJournalEntry extends string = string,\n  TAccountSigner extends string = string,\n  TAccountSystemProgram extends string = string,\n> = {\n  journalEntry?: Address<TAccountJournalEntry>;\n  signer: TransactionSigner<TAccountSigner>;\n  systemProgram?: Address<TAccountSystemProgram>;\n  title: DeleteJournalEntryInstructionDataArgs['title'];\n};\n\nexport async function getDeleteJournalEntryInstructionAsync<\n  TAccountJournalEntry extends string,\n  TAccountSigner extends string,\n  TAccountSystemProgram extends string,\n  TProgramAddress extends Address = typeof CURD_DAPP_PROGRAM_ADDRESS,\n>(\n  input: DeleteJournalEntryAsyncInput<\n    TAccountJournalEntry,\n    TAccountSigner,\n    TAccountSystemProgram\n  >,\n  config?: { programAddress?: TProgramAddress }\n): Promise<\n  DeleteJournalEntryInstruction<\n    TProgramAddress,\n    TAccountJournalEntry,\n    TAccountSigner,\n    TAccountSystemProgram\n  >\n> {\n  // Program address.\n  const programAddress = config?.programAddress ?? CURD_DAPP_PROGRAM_ADDRESS;\n\n  // Original accounts.\n  const originalAccounts = {\n    journalEntry: { value: input.journalEntry ?? null, isWritable: true },\n    signer: { value: input.signer ?? null, isWritable: true },\n    systemProgram: { value: input.systemProgram ?? null, isWritable: false },\n  };\n  const accounts = originalAccounts as Record<\n    keyof typeof originalAccounts,\n    ResolvedAccount\n  >;\n\n  // Original args.\n  const args = { ...input };\n\n  // Resolve default values.\n  if (!accounts.journalEntry.value) {\n    accounts.journalEntry.value = await getProgramDerivedAddress({\n      programAddress,\n      seeds: [\n        addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder()).encode(\n          expectSome(args.title)\n        ),\n        getAddressEncoder().encode(expectAddress(accounts.signer.value)),\n      ],\n    });\n  }\n  if (!accounts.systemProgram.value) {\n    accounts.systemProgram.value =\n      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;\n  }\n\n  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');\n  const instruction = {\n    accounts: [\n      getAccountMeta(accounts.journalEntry),\n      getAccountMeta(accounts.signer),\n      getAccountMeta(accounts.systemProgram),\n    ],\n    programAddress,\n    data: getDeleteJournalEntryInstructionDataEncoder().encode(\n      args as DeleteJournalEntryInstructionDataArgs\n    ),\n  } as DeleteJournalEntryInstruction<\n    TProgramAddress,\n    TAccountJournalEntry,\n    TAccountSigner,\n    TAccountSystemProgram\n  >;\n\n  return instruction;\n}\n\nexport type DeleteJournalEntryInput<\n  TAccountJournalEntry extends string = string,\n  TAccountSigner extends string = string,\n  TAccountSystemProgram extends string = string,\n> = {\n  journalEntry: Address<TAccountJournalEntry>;\n  signer: TransactionSigner<TAccountSigner>;\n  systemProgram?: Address<TAccountSystemProgram>;\n  title: DeleteJournalEntryInstructionDataArgs['title'];\n};\n\nexport function getDeleteJournalEntryInstruction<\n  TAccountJournalEntry extends string,\n  TAccountSigner extends string,\n  TAccountSystemProgram extends string,\n  TProgramAddress extends Address = typeof CURD_DAPP_PROGRAM_ADDRESS,\n>(\n  input: DeleteJournalEntryInput<\n    TAccountJournalEntry,\n    TAccountSigner,\n    TAccountSystemProgram\n  >,\n  config?: { programAddress?: TProgramAddress }\n): DeleteJournalEntryInstruction<\n  TProgramAddress,\n  TAccountJournalEntry,\n  TAccountSigner,\n  TAccountSystemProgram\n> {\n  // Program address.\n  const programAddress = config?.programAddress ?? CURD_DAPP_PROGRAM_ADDRESS;\n\n  // Original accounts.\n  const originalAccounts = {\n    journalEntry: { value: input.journalEntry ?? null, isWritable: true },\n    signer: { value: input.signer ?? null, isWritable: true },\n    systemProgram: { value: input.systemProgram ?? null, isWritable: false },\n  };\n  const accounts = originalAccounts as Record<\n    keyof typeof originalAccounts,\n    ResolvedAccount\n  >;\n\n  // Original args.\n  const args = { ...input };\n\n  // Resolve default values.\n  if (!accounts.systemProgram.value) {\n    accounts.systemProgram.value =\n      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;\n  }\n\n  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');\n  const instruction = {\n    accounts: [\n      getAccountMeta(accounts.journalEntry),\n      getAccountMeta(accounts.signer),\n      getAccountMeta(accounts.systemProgram),\n    ],\n    programAddress,\n    data: getDeleteJournalEntryInstructionDataEncoder().encode(\n      args as DeleteJournalEntryInstructionDataArgs\n    ),\n  } as DeleteJournalEntryInstruction<\n    TProgramAddress,\n    TAccountJournalEntry,\n    TAccountSigner,\n    TAccountSystemProgram\n  >;\n\n  return instruction;\n}\n\nexport type ParsedDeleteJournalEntryInstruction<\n  TProgram extends string = typeof CURD_DAPP_PROGRAM_ADDRESS,\n  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],\n> = {\n  programAddress: Address<TProgram>;\n  accounts: {\n    journalEntry: TAccountMetas[0];\n    signer: TAccountMetas[1];\n    systemProgram: TAccountMetas[2];\n  };\n  data: DeleteJournalEntryInstructionData;\n};\n\nexport function parseDeleteJournalEntryInstruction<\n  TProgram extends string,\n  TAccountMetas extends readonly AccountMeta[],\n>(\n  instruction: Instruction<TProgram> &\n    InstructionWithAccounts<TAccountMetas> &\n    InstructionWithData<ReadonlyUint8Array>\n): ParsedDeleteJournalEntryInstruction<TProgram, TAccountMetas> {\n  if (instruction.accounts.length < 3) {\n    // TODO: Coded error.\n    throw new Error('Not enough accounts');\n  }\n  let accountIndex = 0;\n  const getNextAccount = () => {\n    const accountMeta = instruction.accounts![accountIndex]!;\n    accountIndex += 1;\n    return accountMeta;\n  };\n  return {\n    programAddress: instruction.programAddress,\n    accounts: {\n      journalEntry: getNextAccount(),\n      signer: getNextAccount(),\n      systemProgram: getNextAccount(),\n    },\n    data: getDeleteJournalEntryInstructionDataDecoder().decode(\n      instruction.data\n    ),\n  };\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 687, "column": 0}, "map": {"version":3,"sources":["file:///Users/sunqq/Work/solana/qq-solana-dapp/curd-dapp/app/clients/ts/instructions/updateJournalEntry.ts"],"sourcesContent":["/**\n * This code was AUTOGENERATED using the codama library.\n * Please DO NOT EDIT THIS FILE, instead use visitors\n * to add features, then rerun codama to update it.\n *\n * @see https://github.com/codama-idl/codama\n */\n\nimport {\n  addDecoderSizePrefix,\n  addEncoderSizePrefix,\n  combineCodec,\n  fixDecoderSize,\n  fixEncoderSize,\n  getAddressEncoder,\n  getBytesDecoder,\n  getBytesEncoder,\n  getProgramDerivedAddress,\n  getStructDecoder,\n  getStructEncoder,\n  getU32Decoder,\n  getU32Encoder,\n  getUtf8Decoder,\n  getUtf8Encoder,\n  transformEncoder,\n  type AccountMeta,\n  type AccountSignerMeta,\n  type Address,\n  type Codec,\n  type Decoder,\n  type Encoder,\n  type Instruction,\n  type InstructionWithAccounts,\n  type InstructionWithData,\n  type ReadonlyAccount,\n  type ReadonlyUint8Array,\n  type TransactionSigner,\n  type WritableAccount,\n  type WritableSignerAccount,\n} from '@solana/kit';\nimport { CURD_DAPP_PROGRAM_ADDRESS } from '../programs';\nimport {\n  expectAddress,\n  expectSome,\n  getAccountMetaFactory,\n  type ResolvedAccount,\n} from '../shared';\n\nexport const UPDATE_JOURNAL_ENTRY_DISCRIMINATOR = new Uint8Array([\n  113, 164, 49, 62, 43, 83, 194, 172,\n]);\n\nexport function getUpdateJournalEntryDiscriminatorBytes() {\n  return fixEncoderSize(getBytesEncoder(), 8).encode(\n    UPDATE_JOURNAL_ENTRY_DISCRIMINATOR\n  );\n}\n\nexport type UpdateJournalEntryInstruction<\n  TProgram extends string = typeof CURD_DAPP_PROGRAM_ADDRESS,\n  TAccountJournalEntry extends string | AccountMeta<string> = string,\n  TAccountSigner extends string | AccountMeta<string> = string,\n  TAccountSystemProgram extends\n    | string\n    | AccountMeta<string> = '11111111111111111111111111111111',\n  TRemainingAccounts extends readonly AccountMeta<string>[] = [],\n> = Instruction<TProgram> &\n  InstructionWithData<ReadonlyUint8Array> &\n  InstructionWithAccounts<\n    [\n      TAccountJournalEntry extends string\n        ? WritableAccount<TAccountJournalEntry>\n        : TAccountJournalEntry,\n      TAccountSigner extends string\n        ? WritableSignerAccount<TAccountSigner> &\n            AccountSignerMeta<TAccountSigner>\n        : TAccountSigner,\n      TAccountSystemProgram extends string\n        ? ReadonlyAccount<TAccountSystemProgram>\n        : TAccountSystemProgram,\n      ...TRemainingAccounts,\n    ]\n  >;\n\nexport type UpdateJournalEntryInstructionData = {\n  discriminator: ReadonlyUint8Array;\n  title: string;\n  content: string;\n};\n\nexport type UpdateJournalEntryInstructionDataArgs = {\n  title: string;\n  content: string;\n};\n\nexport function getUpdateJournalEntryInstructionDataEncoder(): Encoder<UpdateJournalEntryInstructionDataArgs> {\n  return transformEncoder(\n    getStructEncoder([\n      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],\n      ['title', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],\n      ['content', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],\n    ]),\n    (value) => ({ ...value, discriminator: UPDATE_JOURNAL_ENTRY_DISCRIMINATOR })\n  );\n}\n\nexport function getUpdateJournalEntryInstructionDataDecoder(): Decoder<UpdateJournalEntryInstructionData> {\n  return getStructDecoder([\n    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],\n    ['title', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],\n    ['content', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],\n  ]);\n}\n\nexport function getUpdateJournalEntryInstructionDataCodec(): Codec<\n  UpdateJournalEntryInstructionDataArgs,\n  UpdateJournalEntryInstructionData\n> {\n  return combineCodec(\n    getUpdateJournalEntryInstructionDataEncoder(),\n    getUpdateJournalEntryInstructionDataDecoder()\n  );\n}\n\nexport type UpdateJournalEntryAsyncInput<\n  TAccountJournalEntry extends string = string,\n  TAccountSigner extends string = string,\n  TAccountSystemProgram extends string = string,\n> = {\n  journalEntry?: Address<TAccountJournalEntry>;\n  signer: TransactionSigner<TAccountSigner>;\n  systemProgram?: Address<TAccountSystemProgram>;\n  title: UpdateJournalEntryInstructionDataArgs['title'];\n  content: UpdateJournalEntryInstructionDataArgs['content'];\n};\n\nexport async function getUpdateJournalEntryInstructionAsync<\n  TAccountJournalEntry extends string,\n  TAccountSigner extends string,\n  TAccountSystemProgram extends string,\n  TProgramAddress extends Address = typeof CURD_DAPP_PROGRAM_ADDRESS,\n>(\n  input: UpdateJournalEntryAsyncInput<\n    TAccountJournalEntry,\n    TAccountSigner,\n    TAccountSystemProgram\n  >,\n  config?: { programAddress?: TProgramAddress }\n): Promise<\n  UpdateJournalEntryInstruction<\n    TProgramAddress,\n    TAccountJournalEntry,\n    TAccountSigner,\n    TAccountSystemProgram\n  >\n> {\n  // Program address.\n  const programAddress = config?.programAddress ?? CURD_DAPP_PROGRAM_ADDRESS;\n\n  // Original accounts.\n  const originalAccounts = {\n    journalEntry: { value: input.journalEntry ?? null, isWritable: true },\n    signer: { value: input.signer ?? null, isWritable: true },\n    systemProgram: { value: input.systemProgram ?? null, isWritable: false },\n  };\n  const accounts = originalAccounts as Record<\n    keyof typeof originalAccounts,\n    ResolvedAccount\n  >;\n\n  // Original args.\n  const args = { ...input };\n\n  // Resolve default values.\n  if (!accounts.journalEntry.value) {\n    accounts.journalEntry.value = await getProgramDerivedAddress({\n      programAddress,\n      seeds: [\n        addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder()).encode(\n          expectSome(args.title)\n        ),\n        getAddressEncoder().encode(expectAddress(accounts.signer.value)),\n      ],\n    });\n  }\n  if (!accounts.systemProgram.value) {\n    accounts.systemProgram.value =\n      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;\n  }\n\n  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');\n  const instruction = {\n    accounts: [\n      getAccountMeta(accounts.journalEntry),\n      getAccountMeta(accounts.signer),\n      getAccountMeta(accounts.systemProgram),\n    ],\n    programAddress,\n    data: getUpdateJournalEntryInstructionDataEncoder().encode(\n      args as UpdateJournalEntryInstructionDataArgs\n    ),\n  } as UpdateJournalEntryInstruction<\n    TProgramAddress,\n    TAccountJournalEntry,\n    TAccountSigner,\n    TAccountSystemProgram\n  >;\n\n  return instruction;\n}\n\nexport type UpdateJournalEntryInput<\n  TAccountJournalEntry extends string = string,\n  TAccountSigner extends string = string,\n  TAccountSystemProgram extends string = string,\n> = {\n  journalEntry: Address<TAccountJournalEntry>;\n  signer: TransactionSigner<TAccountSigner>;\n  systemProgram?: Address<TAccountSystemProgram>;\n  title: UpdateJournalEntryInstructionDataArgs['title'];\n  content: UpdateJournalEntryInstructionDataArgs['content'];\n};\n\nexport function getUpdateJournalEntryInstruction<\n  TAccountJournalEntry extends string,\n  TAccountSigner extends string,\n  TAccountSystemProgram extends string,\n  TProgramAddress extends Address = typeof CURD_DAPP_PROGRAM_ADDRESS,\n>(\n  input: UpdateJournalEntryInput<\n    TAccountJournalEntry,\n    TAccountSigner,\n    TAccountSystemProgram\n  >,\n  config?: { programAddress?: TProgramAddress }\n): UpdateJournalEntryInstruction<\n  TProgramAddress,\n  TAccountJournalEntry,\n  TAccountSigner,\n  TAccountSystemProgram\n> {\n  // Program address.\n  const programAddress = config?.programAddress ?? CURD_DAPP_PROGRAM_ADDRESS;\n\n  // Original accounts.\n  const originalAccounts = {\n    journalEntry: { value: input.journalEntry ?? null, isWritable: true },\n    signer: { value: input.signer ?? null, isWritable: true },\n    systemProgram: { value: input.systemProgram ?? null, isWritable: false },\n  };\n  const accounts = originalAccounts as Record<\n    keyof typeof originalAccounts,\n    ResolvedAccount\n  >;\n\n  // Original args.\n  const args = { ...input };\n\n  // Resolve default values.\n  if (!accounts.systemProgram.value) {\n    accounts.systemProgram.value =\n      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;\n  }\n\n  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');\n  const instruction = {\n    accounts: [\n      getAccountMeta(accounts.journalEntry),\n      getAccountMeta(accounts.signer),\n      getAccountMeta(accounts.systemProgram),\n    ],\n    programAddress,\n    data: getUpdateJournalEntryInstructionDataEncoder().encode(\n      args as UpdateJournalEntryInstructionDataArgs\n    ),\n  } as UpdateJournalEntryInstruction<\n    TProgramAddress,\n    TAccountJournalEntry,\n    TAccountSigner,\n    TAccountSystemProgram\n  >;\n\n  return instruction;\n}\n\nexport type ParsedUpdateJournalEntryInstruction<\n  TProgram extends string = typeof CURD_DAPP_PROGRAM_ADDRESS,\n  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],\n> = {\n  programAddress: Address<TProgram>;\n  accounts: {\n    journalEntry: TAccountMetas[0];\n    signer: TAccountMetas[1];\n    systemProgram: TAccountMetas[2];\n  };\n  data: UpdateJournalEntryInstructionData;\n};\n\nexport function parseUpdateJournalEntryInstruction<\n  TProgram extends string,\n  TAccountMetas extends readonly AccountMeta[],\n>(\n  instruction: Instruction<TProgram> &\n    InstructionWithAccounts<TAccountMetas> &\n    InstructionWithData<ReadonlyUint8Array>\n): ParsedUpdateJournalEntryInstruction<TProgram, TAccountMetas> {\n  if (instruction.accounts.length < 3) {\n    // TODO: Coded error.\n    throw new Error('Not enough accounts');\n  }\n  let accountIndex = 0;\n  const getNextAccount = () => {\n    const accountMeta = instruction.accounts![accountIndex]!;\n    accountIndex += 1;\n    return accountMeta;\n  };\n  return {\n    programAddress: instruction.programAddress,\n    accounts: {\n      journalEntry: getNextAccount(),\n      signer: getNextAccount(),\n      systemProgram: getNextAccount(),\n    },\n    data: getUpdateJournalEntryInstructionDataDecoder().decode(\n      instruction.data\n    ),\n  };\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 877, "column": 0}, "map": {"version":3,"sources":["file:///Users/sunqq/Work/solana/qq-solana-dapp/curd-dapp/app/clients/ts/instructions/index.ts"],"sourcesContent":["/**\n * This code was AUTOGENERATED using the codama library.\n * Please DO NOT EDIT THIS FILE, instead use visitors\n * to add features, then rerun codama to update it.\n *\n * @see https://github.com/codama-idl/codama\n */\n\nexport * from './createJournalEntry';\nexport * from './deleteJournalEntry';\nexport * from './updateJournalEntry';\n"],"names":[],"mappings":"AAAA;;;;;;CAMC;AAED;AACA;AACA","debugId":null}},
    {"offset": {"line": 903, "column": 0}, "map": {"version":3,"sources":["file:///Users/sunqq/Work/solana/qq-solana-dapp/curd-dapp/app/clients/ts/index.ts"],"sourcesContent":["/**\n * This code was AUTOGENERATED using the codama library.\n * Please DO NOT EDIT THIS FILE, instead use visitors\n * to add features, then rerun codama to update it.\n *\n * @see https://github.com/codama-idl/codama\n */\n\nexport * from './accounts';\nexport * from './instructions';\nexport * from './programs';\n"],"names":[],"mappings":"AAAA;;;;;;CAMC;AAED;AACA;AACA","debugId":null}},
    {"offset": {"line": 932, "column": 0}, "map": {"version":3,"sources":["file:///Users/sunqq/Work/solana/qq-solana-dapp/curd-dapp/app/src/components/journal/journal-data-access.tsx"],"sourcesContent":["'use client'\n\nimport {\n  CURD_DAPP_PROGRAM_ADDRESS,\n  decodeJournalEntry,\n  getCreateJournalEntryInstructionAsync,\n  JOURNAL_ENTRY_DISCRIMINATOR,\n} from '@/../clients/ts'\nimport { useMutation, useQuery, useQueryClient } from '@tanstack/react-query'\nimport type { Address, Base64EncodedBytes, Instruction } from '@solana/kit'\nimport { useWalletUi } from '@wallet-ui/react'\nimport {\n  AccountRole,\n  createTransaction,\n  getBase58Decoder,\n  signAndSendTransactionMessageWithSigners,\n  SolanaClient,\n} from 'gill'\nimport { toastTx } from '../toast-tx'\nimport { toast } from 'sonner'\nimport { useWalletUiSigner } from '../solana/use-wallet-ui-signer'\nimport { PublicKey } from '@solana/web3.js'\nimport idl from '@/../idl/curd_dapp.json'\n\nexport async function fetchJournalEntriesByOwner(rpc: SolanaClient['rpc'], address: Address) {\n  const accounts = await rpc\n    .getProgramAccounts(CURD_DAPP_PROGRAM_ADDRESS, {\n      encoding: 'base64',\n      commitment: 'confirmed',\n      filters: [\n        {\n          memcmp: {\n            encoding: 'base64',\n            offset: BigInt(0),\n            bytes: Buffer.from(JOURNAL_ENTRY_DISCRIMINATOR).toString('base64') as Base64EncodedBytes,\n          },\n        },\n        {\n          memcmp: {\n            encoding: 'base64',\n            offset: BigInt(8),\n            bytes: Buffer.from(address).toString('base64') as Base64EncodedBytes,\n          },\n        },\n      ],\n    })\n    .send()\n\n  // EncodedAccount<string>\n  const encodedAccounts = accounts.map((acc) => ({\n    address: acc.pubkey as Address,\n    data: Buffer.from(acc.account.data[0], 'base64'),\n    lamports: acc.account.lamports,\n    executable: acc.account.executable,\n    programAddress: CURD_DAPP_PROGRAM_ADDRESS,\n    space: BigInt(acc.account.data[0].length),\n  }))\n\n  return encodedAccounts.map((ea) => decodeJournalEntry(ea))\n}\n\nfunction useGetJournalEntriesQueryKey({ address }: { address: Address }) {\n  const { cluster } = useWalletUi()\n  return ['get-journal-entries', { cluster, address }]\n}\n\nfunction useInvalidateGetJournalEntriesQuery({ address }: { address: Address }) {\n  const queryClient = useQueryClient()\n  const queryKey = useGetJournalEntriesQueryKey({ address })\n  return async () => {\n    await queryClient.invalidateQueries({ queryKey })\n  }\n}\n\nexport function useGetJournalEntriesQuery({ address }: { address: Address }) {\n  const { client } = useWalletUi()\n\n  return useQuery({\n    queryKey: useGetJournalEntriesQueryKey({ address }),\n    queryFn: () => fetchJournalEntriesByOwner(client.rpc, address),\n  })\n}\n\nexport function useCreateJournalMutation({ address }: { address: Address }) {\n  const { client } = useWalletUi()\n  const signer = useWalletUiSigner()\n  const invalidateGetJournalEntriesQuery = useInvalidateGetJournalEntriesQuery({ address })\n\n  return useMutation({\n    mutationFn: async (input: { title: string; content: string }) => {\n      try {\n        // const ix = await getCreateJournalEntryInstructionAsync({\n        //   signer: signer,\n        //   title: input.title,\n        //   content: input.content,\n        // })\n\n        const ix = buildCreateJournalEntryIx({\n          title: input.title,\n          content: input.content,\n          signer: new PublicKey(address), // signer,\n        })\n\n        // get the leatest blockhash\n        const { value: latestBlockhash } = await client.rpc.getLatestBlockhash({ commitment: 'confirmed' }).send()\n        const transaction = createTransaction({\n          feePayer: signer,\n          version: 0,\n          latestBlockhash,\n          instructions: [ix],\n        })\n\n        const signatureBytes = await signAndSendTransactionMessageWithSigners(transaction)\n        const signature = getBase58Decoder().decode(signatureBytes)\n\n        console.log('create journal tx signature:', signature)\n        return signature\n      } catch (error: unknown) {\n        console.log('error', `Transaction failed! ${error}`)\n        return\n      }\n    },\n    onSuccess: async (tx) => {\n      toastTx(tx)\n      await Promise.all([invalidateGetJournalEntriesQuery()])\n    },\n    onError: (error) => {\n      toast.error(`Transaction failed! ${error.message}`)\n    },\n  })\n}\n\nexport function buildCreateJournalEntryIx(input: { title: string; content: string; signer: PublicKey }): Instruction {\n  // 1️⃣ 计算 PDA\n  const [journalEntryPda] = PublicKey.findProgramAddressSync(\n    [Buffer.from(input.title, 'utf8'), input.signer.toBuffer()],\n    new PublicKey(CURD_DAPP_PROGRAM_ADDRESS),\n  )\n\n  // 2️⃣ 找到 discriminator\n  type JournalInstruction = { name: string; discriminator: number[] }\n  const ixDef = idl.instructions.find((i: JournalInstruction) => i.name === 'create_journal_entry')\n  if (!ixDef) throw new Error('create_journal_entry not found in IDL')\n\n  const discriminator = Buffer.from(ixDef.discriminator)\n\n  // 3️⃣ 序列化参数 title, content (anchor string: u32-len + utf8-bytes)\n  const encodeString = (str: string) => {\n    const buf = Buffer.from(str, 'utf8')\n    const len = Buffer.alloc(4)\n    len.writeUInt32LE(buf.length, 0)\n    return Buffer.concat([len, buf])\n  }\n\n  const titleBuf = encodeString(input.title)\n  const contentBuf = encodeString(input.content)\n\n  // 4️⃣ 拼装 data\n  const data = Buffer.concat([discriminator, titleBuf, contentBuf])\n\n  // 5️⃣ 构建 Instruction\n  const ix: Instruction = {\n    programAddress: CURD_DAPP_PROGRAM_ADDRESS,\n    accounts: [\n      { address: journalEntryPda.toBase58() as Address, role: AccountRole.WRITABLE },\n      { address: input.signer.toBase58() as Address, role: AccountRole.WRITABLE_SIGNER },\n    ],\n    data,\n  }\n\n  return ix\n}\n"],"names":[],"mappings":";;;;;;AAEA;AAAA;AAAA;AAMA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAOA;AACA;AACA;;;;;;AAEA;AAtBA;;;;;;;;;;AAwBO,eAAe,2BAA2B,GAAwB,EAAE,OAAgB;IACzF,MAAM,WAAW,MAAM,IACpB,kBAAkB,CAAC,qIAAA,CAAA,4BAAyB,EAAE;QAC7C,UAAU;QACV,YAAY;QACZ,SAAS;YACP;gBACE,QAAQ;oBACN,UAAU;oBACV,QAAQ,OAAO;oBACf,OAAO,OAAO,IAAI,CAAC,yIAAA,CAAA,8BAA2B,EAAE,QAAQ,CAAC;gBAC3D;YACF;YACA;gBACE,QAAQ;oBACN,UAAU;oBACV,QAAQ,OAAO;oBACf,OAAO,OAAO,IAAI,CAAC,SAAS,QAAQ,CAAC;gBACvC;YACF;SACD;IACH,GACC,IAAI;IAEP,yBAAyB;IACzB,MAAM,kBAAkB,SAAS,GAAG,CAAC,CAAC,MAAQ,CAAC;YAC7C,SAAS,IAAI,MAAM;YACnB,MAAM,OAAO,IAAI,CAAC,IAAI,OAAO,CAAC,IAAI,CAAC,EAAE,EAAE;YACvC,UAAU,IAAI,OAAO,CAAC,QAAQ;YAC9B,YAAY,IAAI,OAAO,CAAC,UAAU;YAClC,gBAAgB,qIAAA,CAAA,4BAAyB;YACzC,OAAO,OAAO,IAAI,OAAO,CAAC,IAAI,CAAC,EAAE,CAAC,MAAM;QAC1C,CAAC;IAED,OAAO,gBAAgB,GAAG,CAAC,CAAC,KAAO,CAAA,GAAA,yIAAA,CAAA,qBAAkB,AAAD,EAAE;AACxD;AAEA,SAAS,6BAA6B,EAAE,OAAO,EAAwB;IACrE,MAAM,EAAE,OAAO,EAAE,GAAG,CAAA,GAAA,iLAAA,CAAA,cAAW,AAAD;IAC9B,OAAO;QAAC;QAAuB;YAAE;YAAS;QAAQ;KAAE;AACtD;AAEA,SAAS,oCAAoC,EAAE,OAAO,EAAwB;IAC5E,MAAM,cAAc,CAAA,GAAA,sLAAA,CAAA,iBAAc,AAAD;IACjC,MAAM,WAAW,6BAA6B;QAAE;IAAQ;IACxD,OAAO;QACL,MAAM,YAAY,iBAAiB,CAAC;YAAE;QAAS;IACjD;AACF;AAEO,SAAS,0BAA0B,EAAE,OAAO,EAAwB;IACzE,MAAM,EAAE,MAAM,EAAE,GAAG,CAAA,GAAA,iLAAA,CAAA,cAAW,AAAD;IAE7B,OAAO,CAAA,GAAA,2KAAA,CAAA,WAAQ,AAAD,EAAE;QACd,UAAU,6BAA6B;YAAE;QAAQ;QACjD,SAAS,IAAM,2BAA2B,OAAO,GAAG,EAAE;IACxD;AACF;AAEO,SAAS,yBAAyB,EAAE,OAAO,EAAwB;IACxE,MAAM,EAAE,MAAM,EAAE,GAAG,CAAA,GAAA,iLAAA,CAAA,cAAW,AAAD;IAC7B,MAAM,SAAS,CAAA,GAAA,6JAAA,CAAA,oBAAiB,AAAD;IAC/B,MAAM,mCAAmC,oCAAoC;QAAE;IAAQ;IAEvF,OAAO,CAAA,GAAA,8KAAA,CAAA,cAAW,AAAD,EAAE;QACjB,YAAY,OAAO;YACjB,IAAI;gBACF,2DAA2D;gBAC3D,oBAAoB;gBACpB,wBAAwB;gBACxB,4BAA4B;gBAC5B,KAAK;gBAEL,MAAM,KAAK,0BAA0B;oBACnC,OAAO,MAAM,KAAK;oBAClB,SAAS,MAAM,OAAO;oBACtB,QAAQ,IAAI,UAAU;gBACxB;gBAEA,4BAA4B;gBAC5B,MAAM,EAAE,OAAO,eAAe,EAAE,GAAG,MAAM,OAAO,GAAG,CAAC,kBAAkB,CAAC;oBAAE,YAAY;gBAAY,GAAG,IAAI;gBACxG,MAAM,cAAc,CAAA,GAAA,0JAAA,CAAA,oBAAiB,AAAD,EAAE;oBACpC,UAAU;oBACV,SAAS;oBACT;oBACA,cAAc;wBAAC;qBAAG;gBACpB;gBAEA,MAAM,iBAAiB,MAAM,CAAA,GAAA,gMAAA,CAAA,2CAAwC,AAAD,EAAE;gBACtE,MAAM,YAAY,CAAA,GAAA,6MAAA,CAAA,mBAAgB,AAAD,IAAI,MAAM,CAAC;gBAE5C,QAAQ,GAAG,CAAC,gCAAgC;gBAC5C,OAAO;YACT,EAAE,OAAO,OAAgB;gBACvB,QAAQ,GAAG,CAAC,SAAS,CAAC,oBAAoB,EAAE,OAAO;gBACnD;YACF;QACF;QACA,WAAW,OAAO;YAChB,CAAA,GAAA,iIAAA,CAAA,UAAO,AAAD,EAAE;YACR,MAAM,QAAQ,GAAG,CAAC;gBAAC;aAAmC;QACxD;QACA,SAAS,CAAC;YACR,wIAAA,CAAA,QAAK,CAAC,KAAK,CAAC,CAAC,oBAAoB,EAAE,MAAM,OAAO,EAAE;QACpD;IACF;AACF;AAEO,SAAS,0BAA0B,KAA4D;IACpG,aAAa;IACb,MAAM,CAAC,gBAAgB,GAAG,UAAU,sBAAsB,CACxD;QAAC,OAAO,IAAI,CAAC,MAAM,KAAK,EAAE;QAAS,MAAM,MAAM,CAAC,QAAQ;KAAG,EAC3D,IAAI,UAAU,qIAAA,CAAA,4BAAyB;IAKzC,MAAM,QAAQ,wFAAA,CAAA,UAAG,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC,IAA0B,EAAE,IAAI,KAAK;IAC1E,IAAI,CAAC,OAAO,MAAM,IAAI,MAAM;IAE5B,MAAM,gBAAgB,OAAO,IAAI,CAAC,MAAM,aAAa;IAErD,iEAAiE;IACjE,MAAM,eAAe,CAAC;QACpB,MAAM,MAAM,OAAO,IAAI,CAAC,KAAK;QAC7B,MAAM,MAAM,OAAO,KAAK,CAAC;QACzB,IAAI,aAAa,CAAC,IAAI,MAAM,EAAE;QAC9B,OAAO,OAAO,MAAM,CAAC;YAAC;YAAK;SAAI;IACjC;IAEA,MAAM,WAAW,aAAa,MAAM,KAAK;IACzC,MAAM,aAAa,aAAa,MAAM,OAAO;IAE7C,cAAc;IACd,MAAM,OAAO,OAAO,MAAM,CAAC;QAAC;QAAe;QAAU;KAAW;IAEhE,qBAAqB;IACrB,MAAM,KAAkB;QACtB,gBAAgB,qIAAA,CAAA,4BAAyB;QACzC,UAAU;YACR;gBAAE,SAAS,gBAAgB,QAAQ;gBAAe,MAAM,qMAAA,CAAA,cAAW,CAAC,QAAQ;YAAC;YAC7E;gBAAE,SAAS,MAAM,MAAM,CAAC,QAAQ;gBAAe,MAAM,qMAAA,CAAA,cAAW,CAAC,eAAe;YAAC;SAClF;QACD;IACF;IAEA,OAAO;AACT","debugId":null}},
    {"offset": {"line": 1129, "column": 0}, "map": {"version":3,"sources":["file:///Users/sunqq/Work/solana/qq-solana-dapp/curd-dapp/app/src/components/journal/journal-ui.tsx"],"sourcesContent":["import { useGetJournalEntriesQuery, useCreateJournalMutation } from './journal-data-access'\nimport { useMemo, useState } from 'react'\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '../ui/table'\nimport { Button } from '../ui/button'\nimport { RefreshCw } from 'lucide-react'\nimport { Address } from 'gill'\n\nexport function JournalList({ address }: { address: Address }) {\n  const query = useGetJournalEntriesQuery({ address })\n  const [showAll, setShowAll] = useState(false)\n\n  const items = useMemo(() => {\n    if (showAll) return query.data\n    return query.data?.slice(0, 5)\n  }, [query.data, showAll])\n\n  return (\n    <div className=\"space-y-2\">\n      <div className=\"flex justify-between\">\n        <h2 className=\"text-2xl font-bold\">Transaction History</h2>\n        <div className=\"space-x-2\">\n          {query.isLoading ? (\n            <span className=\"loading loading-spinner\"></span>\n          ) : (\n            <Button variant=\"outline\" onClick={() => query.refetch()}>\n              <RefreshCw size={16} />\n            </Button>\n          )}\n        </div>\n      </div>\n      {query.isError && <pre className=\"alert alert-error\">Error: {query.error?.message.toString()}</pre>}\n      {query.isSuccess && (\n        <div>\n          {query.data.length === 0 ? (\n            <div>No journals found.</div>\n          ) : (\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead>Title</TableHead>\n                  <TableHead>Content</TableHead>\n                  <TableHead>Operation</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {items?.map((item) => (\n                  <TableRow key={item.data.title}>\n                    <TableCell className=\"font-mono\">{item.data.title}</TableCell>\n                    <TableCell>{item.data.content}</TableCell>\n                    <TableCell>\n                      <button\n                        className=\"bg-yellow-500 text-white px-2 py-1 mr-2\"\n                        onClick={() => console.log(`Edit journal: ${item.data.title}`)}\n                      >\n                        Update\n                      </button>\n                      <button\n                        className=\"bg-red-500 text-white px-2 py-1\"\n                        onClick={() => console.log(`Delete journal: ${item.data.title}`)}\n                      >\n                        Delete\n                      </button>\n                    </TableCell>\n                  </TableRow>\n                ))}\n                {(query.data?.length ?? 0) > 5 && (\n                  <TableRow>\n                    <TableCell colSpan={4} className=\"text-center\">\n                      <Button variant=\"outline\" onClick={() => setShowAll(!showAll)}>\n                        {showAll ? 'Show Less' : 'Show All'}\n                      </Button>\n                    </TableCell>\n                  </TableRow>\n                )}\n              </TableBody>\n            </Table>\n          )}\n        </div>\n      )}\n    </div>\n  )\n}\n\nexport function CreateJournal({ address }: { address: Address }) {\n  const [title, setTitle] = useState('')\n  const [content, setContent] = useState('')\n  const [loading, setLoading] = useState(false)\n  const mutation = useCreateJournalMutation({ address })\n\n  const handleSubmit = async () => {\n    setLoading(true)\n    console.log(`Poll ID: ${title}, Choice: ${content}`)\n    await mutation.mutateAsync(\n      {\n        title,\n        content,\n      },\n      {\n        onSuccess: () => {\n          setTitle('')\n          setContent('')\n          setLoading(false)\n        },\n        onError: () => {\n          setLoading(false)\n        },\n      },\n    )\n  }\n\n  return (\n    <div className=\"max-w-xl mx-auto py-10\">\n      <h1 className=\"text-2xl font-bold mb-4\">Create Journal</h1>\n\n      <div className=\"mb-4\">\n        <label className=\"block font-medium mb-1\">Title</label>\n        <input\n          type=\"text\"\n          value={title}\n          onChange={(e) => setTitle(e.target.value)}\n          className=\"w-full border rounded p-2\"\n        />\n      </div>\n\n      <div className=\"mb-4\">\n        <label className=\"block font-medium mb-1\">Content</label>\n        <textarea\n          value={content}\n          onChange={(e) => setContent(e.target.value)}\n          className=\"w-full border rounded p-2\"\n          rows={6}\n        />\n      </div>\n\n      <button\n        onClick={handleSubmit}\n        disabled={loading}\n        className=\"bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700\"\n      >\n        {loading ? 'Submitting...' : 'Create Journal'}\n      </button>\n    </div>\n  )\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 1468, "column": 0}, "map": {"version":3,"sources":["file:///Users/sunqq/Work/solana/qq-solana-dapp/curd-dapp/app/src/components/journal/journal-feature-detail.tsx"],"sourcesContent":["import { assertIsAddress } from 'gill'\nimport { useMemo, useEffect } from 'react'\nimport { useWalletUi } from '@wallet-ui/react'\nimport { useParams, useRouter } from 'next/navigation'\nimport { CreateJournal, JournalList } from './journal-ui'\n\nexport default function JournalFeatureDetail() {\n  const { account } = useWalletUi()\n  const router = useRouter()\n  useEffect(() => {\n    if (!account) {\n      router.replace('/account')\n    }\n  }, [account, router])\n\n  const params = useParams()\n  const address = useMemo(() => {\n    if (!params.address || typeof params.address !== 'string') {\n      return\n    }\n    assertIsAddress(params.address)\n    return params.address\n  }, [params])\n\n  if (!address) {\n    return <div>Error loading account</div>\n  }\n\n  return (\n    <div>\n      <CreateJournal address={address} />\n      <JournalList address={address} />\n    </div>\n  )\n}\n"],"names":[],"mappings":";;;;AAAA;AACA;AACA;AACA;AACA;;;;;;;AAEe,SAAS;IACtB,MAAM,EAAE,OAAO,EAAE,GAAG,CAAA,GAAA,iLAAA,CAAA,cAAW,AAAD;IAC9B,MAAM,SAAS,CAAA,GAAA,kIAAA,CAAA,YAAS,AAAD;IACvB,CAAA,GAAA,qMAAA,CAAA,YAAS,AAAD,EAAE;QACR,IAAI,CAAC,SAAS;YACZ,OAAO,OAAO,CAAC;QACjB;IACF,GAAG;QAAC;QAAS;KAAO;IAEpB,MAAM,SAAS,CAAA,GAAA,kIAAA,CAAA,YAAS,AAAD;IACvB,MAAM,UAAU,CAAA,GAAA,qMAAA,CAAA,UAAO,AAAD,EAAE;QACtB,IAAI,CAAC,OAAO,OAAO,IAAI,OAAO,OAAO,OAAO,KAAK,UAAU;YACzD;QACF;QACA,CAAA,GAAA,kMAAA,CAAA,kBAAe,AAAD,EAAE,OAAO,OAAO;QAC9B,OAAO,OAAO,OAAO;IACvB,GAAG;QAAC;KAAO;IAEX,IAAI,CAAC,SAAS;QACZ,qBAAO,8OAAC;sBAAI;;;;;;IACd;IAEA,qBACE,8OAAC;;0BACC,8OAAC,8IAAA,CAAA,gBAAa;gBAAC,SAAS;;;;;;0BACxB,8OAAC,8IAAA,CAAA,cAAW;gBAAC,SAAS;;;;;;;;;;;;AAG5B","debugId":null}},
    {"offset": {"line": 1540, "column": 0}, "map": {"version":3,"sources":["file:///Users/sunqq/Work/solana/qq-solana-dapp/curd-dapp/app/src/app/journal/%5Baddress%5D/page.tsx"],"sourcesContent":["'use client'\n\nimport JournalFeatureDetail from '@/components/journal/journal-feature-detail'\n\nexport default function Page() {\n  return <JournalFeatureDetail />\n}\n"],"names":[],"mappings":";;;;AAEA;AAFA;;;AAIe,SAAS;IACtB,qBAAO,8OAAC,6JAAA,CAAA,UAAoB;;;;;AAC9B","debugId":null}}]
}