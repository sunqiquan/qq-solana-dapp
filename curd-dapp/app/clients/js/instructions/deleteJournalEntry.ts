/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  getUtf8Decoder,
  getUtf8Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { CURD_DAPP_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  expectSome,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export const DELETE_JOURNAL_ENTRY_DISCRIMINATOR = new Uint8Array([
  156, 50, 93, 5, 157, 97, 188, 114,
]);

export function getDeleteJournalEntryDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    DELETE_JOURNAL_ENTRY_DISCRIMINATOR
  );
}

export type DeleteJournalEntryInstruction<
  TProgram extends string = typeof CURD_DAPP_PROGRAM_ADDRESS,
  TAccountJournalEntry extends string | AccountMeta<string> = string,
  TAccountSigner extends string | AccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountJournalEntry extends string
        ? WritableAccount<TAccountJournalEntry>
        : TAccountJournalEntry,
      TAccountSigner extends string
        ? WritableSignerAccount<TAccountSigner> &
            AccountSignerMeta<TAccountSigner>
        : TAccountSigner,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type DeleteJournalEntryInstructionData = {
  discriminator: ReadonlyUint8Array;
  titleHash: ReadonlyUint8Array;
  title: string;
};

export type DeleteJournalEntryInstructionDataArgs = {
  titleHash: ReadonlyUint8Array;
  title: string;
};

export function getDeleteJournalEntryInstructionDataEncoder(): Encoder<DeleteJournalEntryInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['titleHash', fixEncoderSize(getBytesEncoder(), 32)],
      ['title', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
    ]),
    (value) => ({ ...value, discriminator: DELETE_JOURNAL_ENTRY_DISCRIMINATOR })
  );
}

export function getDeleteJournalEntryInstructionDataDecoder(): Decoder<DeleteJournalEntryInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['titleHash', fixDecoderSize(getBytesDecoder(), 32)],
    ['title', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
  ]);
}

export function getDeleteJournalEntryInstructionDataCodec(): Codec<
  DeleteJournalEntryInstructionDataArgs,
  DeleteJournalEntryInstructionData
> {
  return combineCodec(
    getDeleteJournalEntryInstructionDataEncoder(),
    getDeleteJournalEntryInstructionDataDecoder()
  );
}

export type DeleteJournalEntryAsyncInput<
  TAccountJournalEntry extends string = string,
  TAccountSigner extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  journalEntry?: Address<TAccountJournalEntry>;
  signer: TransactionSigner<TAccountSigner>;
  systemProgram?: Address<TAccountSystemProgram>;
  titleHash: DeleteJournalEntryInstructionDataArgs['titleHash'];
  title: DeleteJournalEntryInstructionDataArgs['title'];
};

export async function getDeleteJournalEntryInstructionAsync<
  TAccountJournalEntry extends string,
  TAccountSigner extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof CURD_DAPP_PROGRAM_ADDRESS,
>(
  input: DeleteJournalEntryAsyncInput<
    TAccountJournalEntry,
    TAccountSigner,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  DeleteJournalEntryInstruction<
    TProgramAddress,
    TAccountJournalEntry,
    TAccountSigner,
    TAccountSystemProgram
  >
> {
  // Program address.
  const programAddress = config?.programAddress ?? CURD_DAPP_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    journalEntry: { value: input.journalEntry ?? null, isWritable: true },
    signer: { value: input.signer ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.journalEntry.value) {
    accounts.journalEntry.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            106, 111, 117, 114, 110, 97, 108, 95, 101, 110, 116, 114, 121,
          ])
        ),
        fixEncoderSize(getBytesEncoder(), 32).encode(
          expectSome(args.titleHash)
        ),
        getAddressEncoder().encode(expectAddress(accounts.signer.value)),
      ],
    });
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.journalEntry),
      getAccountMeta(accounts.signer),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getDeleteJournalEntryInstructionDataEncoder().encode(
      args as DeleteJournalEntryInstructionDataArgs
    ),
  } as DeleteJournalEntryInstruction<
    TProgramAddress,
    TAccountJournalEntry,
    TAccountSigner,
    TAccountSystemProgram
  >;

  return instruction;
}

export type DeleteJournalEntryInput<
  TAccountJournalEntry extends string = string,
  TAccountSigner extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  journalEntry: Address<TAccountJournalEntry>;
  signer: TransactionSigner<TAccountSigner>;
  systemProgram?: Address<TAccountSystemProgram>;
  titleHash: DeleteJournalEntryInstructionDataArgs['titleHash'];
  title: DeleteJournalEntryInstructionDataArgs['title'];
};

export function getDeleteJournalEntryInstruction<
  TAccountJournalEntry extends string,
  TAccountSigner extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof CURD_DAPP_PROGRAM_ADDRESS,
>(
  input: DeleteJournalEntryInput<
    TAccountJournalEntry,
    TAccountSigner,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): DeleteJournalEntryInstruction<
  TProgramAddress,
  TAccountJournalEntry,
  TAccountSigner,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? CURD_DAPP_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    journalEntry: { value: input.journalEntry ?? null, isWritable: true },
    signer: { value: input.signer ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.journalEntry),
      getAccountMeta(accounts.signer),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getDeleteJournalEntryInstructionDataEncoder().encode(
      args as DeleteJournalEntryInstructionDataArgs
    ),
  } as DeleteJournalEntryInstruction<
    TProgramAddress,
    TAccountJournalEntry,
    TAccountSigner,
    TAccountSystemProgram
  >;

  return instruction;
}

export type ParsedDeleteJournalEntryInstruction<
  TProgram extends string = typeof CURD_DAPP_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    journalEntry: TAccountMetas[0];
    signer: TAccountMetas[1];
    systemProgram: TAccountMetas[2];
  };
  data: DeleteJournalEntryInstructionData;
};

export function parseDeleteJournalEntryInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedDeleteJournalEntryInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 3) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      journalEntry: getNextAccount(),
      signer: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getDeleteJournalEntryInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
