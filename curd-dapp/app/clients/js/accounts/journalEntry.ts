/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  getUtf8Decoder,
  getUtf8Encoder,
  transformEncoder,
  type Account,
  type Address,
  type Codec,
  type Decoder,
  type EncodedAccount,
  type Encoder,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from '@solana/kit';

export const JOURNAL_ENTRY_DISCRIMINATOR = new Uint8Array([
  255, 74, 177, 178, 227, 112, 46, 152,
]);

export function getJournalEntryDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    JOURNAL_ENTRY_DISCRIMINATOR
  );
}

export type JournalEntry = {
  discriminator: ReadonlyUint8Array;
  owner: Address;
  title: string;
  content: string;
};

export type JournalEntryArgs = {
  owner: Address;
  title: string;
  content: string;
};

export function getJournalEntryEncoder(): Encoder<JournalEntryArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['owner', getAddressEncoder()],
      ['title', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
      ['content', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
    ]),
    (value) => ({ ...value, discriminator: JOURNAL_ENTRY_DISCRIMINATOR })
  );
}

export function getJournalEntryDecoder(): Decoder<JournalEntry> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['owner', getAddressDecoder()],
    ['title', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
    ['content', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
  ]);
}

export function getJournalEntryCodec(): Codec<JournalEntryArgs, JournalEntry> {
  return combineCodec(getJournalEntryEncoder(), getJournalEntryDecoder());
}

export function decodeJournalEntry<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<JournalEntry, TAddress>;
export function decodeJournalEntry<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<JournalEntry, TAddress>;
export function decodeJournalEntry<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<JournalEntry, TAddress> | MaybeAccount<JournalEntry, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getJournalEntryDecoder()
  );
}

export async function fetchJournalEntry<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<JournalEntry, TAddress>> {
  const maybeAccount = await fetchMaybeJournalEntry(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeJournalEntry<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<JournalEntry, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeJournalEntry(maybeAccount);
}

export async function fetchAllJournalEntry(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<JournalEntry>[]> {
  const maybeAccounts = await fetchAllMaybeJournalEntry(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeJournalEntry(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<JournalEntry>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeJournalEntry(maybeAccount));
}
