{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 202, "column": 0}, "map": {"version":3,"sources":["file:///Users/sunqq/Work/solana/qq-solana-dapp/voting-dapp/voting-web/src/app/api/vote/route.ts"],"sourcesContent":["import { VotingProgram } from './../../../../../voting-program/target/types/voting_program'\nimport * as anchor from '@coral-xyz/anchor'\nimport { PublicKey, Connection } from '@solana/web3.js'\nimport { ActionGetResponse, ACTIONS_CORS_HEADERS } from '@solana/actions'\nimport IDL from './../../../../../voting-program/target/idl/voting_program.json'\n\nexport const OPTIONS = GET\n\nexport async function GET(request: Request) {\n  const actionMetadata: ActionGetResponse = {\n    icon: 'https://hips.hearstapps.com/hmg-prod/images/peanut-butter-vegan-1556206811.jpg?crop=0.6666666666666666xw:1xh;center,top&resize=1200:*',\n    title: 'Vote for Peanut Butter',\n    description: 'Vote for your favorite peanut butter!',\n    label: 'Vote Now!',\n    links: {\n      actions: [\n        {\n          href: 'http://localhost:3000/api/vote?candidate=crunchy',\n          label: 'Vote Crunchy',\n          type: 'transaction',\n        },\n        {\n          href: 'http://localhost:3000/api/vote?candidate=smooth',\n          label: 'Vote Smooth',\n          type: 'transaction',\n        },\n      ],\n    },\n  }\n  return Response.json(actionMetadata, { headers: ACTIONS_CORS_HEADERS })\n}\n\nexport async function POST(request: Request) {\n  const candidate = new URL(request.url).searchParams.get('candidate') as string\n  if (candidate !== 'crunchy' && candidate !== 'smooth') {\n    return Response.json({ error: 'Invalid candidate' }, { status: 400, headers: ACTIONS_CORS_HEADERS })\n  }\n\n  const connection = new Connection('http://localhost:8899', 'confirmed')\n  const program = new anchor.Program(IDL as VotingProgram, { connection })\n  const body = await request.json()\n  let voter: PublicKey\n\n  try {\n    voter = new PublicKey(body.voter)\n  } catch (err: unknown) {\n    const message = err instanceof Error ? err.message : String(err)\n    return Response.json({ error: message }, { status: 400, headers: ACTIONS_CORS_HEADERS })\n  }\n\n  const tx = await program.methods\n    .vote(new anchor.BN(3), candidate)\n    .accounts({\n      voter: voter,\n    })\n    .rpc()\n  console.log('Transaction signature: ', tx)\n\n  return Response.json({ success: true }, { headers: ACTIONS_CORS_HEADERS })\n}\n"],"names":[],"mappings":";;;;;AACA;AAAA;AAAA;AACA;AACA;;;;;;;;;;AAGO,MAAM,UAAU;AAEhB,eAAe,IAAI,OAAgB;IACxC,MAAM,iBAAoC;QACxC,MAAM;QACN,OAAO;QACP,aAAa;QACb,OAAO;QACP,OAAO;YACL,SAAS;gBACP;oBACE,MAAM;oBACN,OAAO;oBACP,MAAM;gBACR;gBACA;oBACE,MAAM;oBACN,OAAO;oBACP,MAAM;gBACR;aACD;QACH;IACF;IACA,OAAO,SAAS,IAAI,CAAC,gBAAgB;QAAE,SAAS,gKAAA,CAAA,uBAAoB;IAAC;AACvE;AAEO,eAAe,KAAK,OAAgB;IACzC,MAAM,YAAY,IAAI,IAAI,QAAQ,GAAG,EAAE,YAAY,CAAC,GAAG,CAAC;IACxD,IAAI,cAAc,aAAa,cAAc,UAAU;QACrD,OAAO,SAAS,IAAI,CAAC;YAAE,OAAO;QAAoB,GAAG;YAAE,QAAQ;YAAK,SAAS,gKAAA,CAAA,uBAAoB;QAAC;IACpG;IAEA,MAAM,aAAa,IAAI,+JAAA,CAAA,aAAU,CAAC,yBAAyB;IAC3D,MAAM,UAAU,IAAI,6LAAA,CAAA,UAAc,CAAC,KAAsB;QAAE;IAAW;IACtE,MAAM,OAAO,MAAM,QAAQ,IAAI;IAC/B,IAAI;IAEJ,IAAI;QACF,QAAQ,IAAI,+JAAA,CAAA,YAAS,CAAC,KAAK,KAAK;IAClC,EAAE,OAAO,KAAc;QACrB,MAAM,UAAU,eAAe,QAAQ,IAAI,OAAO,GAAG,OAAO;QAC5D,OAAO,SAAS,IAAI,CAAC;YAAE,OAAO;QAAQ,GAAG;YAAE,QAAQ;YAAK,SAAS,gKAAA,CAAA,uBAAoB;QAAC;IACxF;IAEA,MAAM,KAAK,MAAM,QAAQ,OAAO,CAC7B,IAAI,CAAC,IAAI,wKAAA,CAAA,KAAS,CAAC,IAAI,WACvB,QAAQ,CAAC;QACR,OAAO;IACT,GACC,GAAG;IACN,QAAQ,GAAG,CAAC,2BAA2B;IAEvC,OAAO,SAAS,IAAI,CAAC;QAAE,SAAS;IAAK,GAAG;QAAE,SAAS,gKAAA,CAAA,uBAAoB;IAAC;AAC1E","debugId":null}}]
}